/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "dirtyUninitializedOracleSamples(uint256,uint256)": FunctionFragment;
    "getLargestSafeQueryWindow()": FunctionFragment;
    "getLatest(uint8)": FunctionFragment;
    "getPastAccumulators(tuple[])": FunctionFragment;
    "getSample(uint256)": FunctionFragment;
    "getTimeWeightedAverage(tuple[])": FunctionFragment;
    "getTotalSamples()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dirtyUninitializedOracleSamples",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLargestSafeQueryWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastAccumulators",
    values: [{ variable: BigNumberish; ago: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSample",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeWeightedAverage",
    values: [
      { variable: BigNumberish; secs: BigNumberish; ago: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSamples",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dirtyUninitializedOracleSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLargestSafeQueryWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLatest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPastAccumulators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeWeightedAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSamples",
    data: BytesLike
  ): Result;

  events: {};
}

export class PoolPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolPriceOracleInterface;

  functions: {
    dirtyUninitializedOracleSamples(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastAccumulators(
      queries: { variable: BigNumberish; ago: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { results: BigNumber[] }>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { results: BigNumber[] }>;

    getTotalSamples(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  dirtyUninitializedOracleSamples(
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

  getLatest(
    variable: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastAccumulators(
    queries: { variable: BigNumberish; ago: BigNumberish }[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSample(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getTimeWeightedAverage(
    queries: {
      variable: BigNumberish;
      secs: BigNumberish;
      ago: BigNumberish;
    }[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    dirtyUninitializedOracleSamples(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulators(
      queries: { variable: BigNumberish; ago: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    dirtyUninitializedOracleSamples(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulators(
      queries: { variable: BigNumberish; ago: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dirtyUninitializedOracleSamples(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLargestSafeQueryWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatest(
      variable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastAccumulators(
      queries: { variable: BigNumberish; ago: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSample(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeWeightedAverage(
      queries: {
        variable: BigNumberish;
        secs: BigNumberish;
        ago: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSamples(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
