/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockVault, MockVaultInterface } from "../MockVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAuthorizer",
        name: "authorizer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "liquidityProvider",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "int256[]",
        name: "deltas",
        type: "int256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "protocolFees",
        type: "uint256[]",
      },
    ],
    name: "PoolBalanceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastChangeBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeePercentage",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "callExitPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IVault.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "lastChangeBlock",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IPoolSwapStructs.SwapRequest",
        name: "request",
        type: "tuple",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "indexIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "indexOut",
        type: "uint256",
      },
    ],
    name: "callGeneralPoolSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastChangeBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolFeePercentage",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "callJoinPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        components: [
          {
            internalType: "enum IVault.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "lastChangeBlock",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IPoolSwapStructs.SwapRequest",
        name: "request",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "balanceTokenIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balanceTokenOut",
        type: "uint256",
      },
    ],
    name: "callMinimalPoolSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthorizer",
    outputs: [
      {
        internalType: "contract IAuthorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    name: "getPoolTokens",
    outputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IVault.PoolSpecialization",
        name: "",
        type: "uint8",
      },
    ],
    name: "registerPool",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "registerTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    name: "updateBalances",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161157738038061157783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6114e6806100916000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806366a9c7d211610076578063f76102db1161005b578063f76102db14610134578063f94d466814610147578063fc6156c514610168576100a3565b806366a9c7d21461010c578063aaabadc51461011f576100a3565b806309b2760f146100a85780630b08cf89146100d15780631865221a146100e65780631cf8afb8146100f9575b600080fd5b6100bb6100b63660046110d9565b61017b565b6040516100c89190611351565b60405180910390f35b6100e46100df366004610e77565b610181565b005b6100e46100f436600461109e565b6102aa565b6100e4610107366004610dd4565b61032c565b6100e461011a366004610fd3565b61059f565b610127610639565b6040516100c891906113c5565b6100e4610142366004610efc565b610655565b61015a610155366004610fbb565b61077b565b6040516100c8929190611323565b6100e4610176366004610dd4565b610920565b50600090565b6040517f01ec954a00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8716906301ec954a906101dc9088908890889088906004016113e6565b602060405180830381600087803b1580156101f657600080fd5b505af115801561020a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022e91906110ff565b9050846040015173ffffffffffffffffffffffffffffffffffffffff16856020015173ffffffffffffffffffffffffffffffffffffffff1686608001517faf6c437771b0b661385e6b30c82a76e9067d1c318485cf0f0c47aeb35a9a1de38460405161029a9190611351565b60405180910390a4505050505050565b6000828152600160205260408120905b8251811015610326578281815181106102cf57fe5b60200260200101518260010160008460000184815481106102ec57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020556001016102ba565b50505050565b6060808873ffffffffffffffffffffffffffffffffffffffff1663d5c096c489338a8a8a8a8a6040518863ffffffff1660e01b8152600401610374979695949392919061135a565b600060405180830381600087803b15801561038e57600080fd5b505af11580156103a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103e89190810190610f5a565b60008a81526001602052604081209294509092505b815481101561046f5783818151811061041257fe5b602002602001015182600101600084600001848154811061042f57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020805490910190556001016103fd565b506060875167ffffffffffffffff8111801561048a57600080fd5b506040519080825280602002602001820160405280156104b4578160200160208202803683370190505b5090506060845167ffffffffffffffff811180156104d157600080fd5b506040519080825280602002602001820160405280156104fb578160200160208202803683370190505b50905060005b855181101561053d5785818151811061051657fe5b602002602001015182828151811061052a57fe5b6020908102919091010152600101610501565b503373ffffffffffffffffffffffffffffffffffffffff168b7fe5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae78848488604051610589939291906112ba565b60405180910390a3505050505050505050505050565b6000838152600160205260408120905b835181101561063257816000018482815181106105c857fe5b60209081029190910181015182546001808201855560009485529290932090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90931692909217909155016105af565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f9d2c110c00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff861690639d2c110c906106ae9087908790879060040161141f565b602060405180830381600087803b1580156106c857600080fd5b505af11580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070091906110ff565b9050836040015173ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1685608001517faf6c437771b0b661385e6b30c82a76e9067d1c318485cf0f0c47aeb35a9a1de38460405161076c9190611351565b60405180910390a45050505050565b60008181526001602052604090208054606091829167ffffffffffffffff811180156107a657600080fd5b506040519080825280602002602001820160405280156107d0578160200160208202803683370190505b50815490935067ffffffffffffffff811180156107ec57600080fd5b50604051908082528060200260200182016040528015610816578160200160208202803683370190505b50915060005b81548110156109195781600001818154811061083457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828151811061086b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508160010160008583815181106108b757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483828151811061090657fe5b602090810291909101015260010161081c565b5050915091565b6060808873ffffffffffffffffffffffffffffffffffffffff166374f3b00989338a8a8a8a8a6040518863ffffffff1660e01b8152600401610968979695949392919061135a565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109dc9190810190610f5a565b60008a81526001602052604081209294509092505b8154811015610a6457838181518110610a0657fe5b6020026020010151826001016000846000018481548110610a2357fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080549190910390556001016109f1565b506060875167ffffffffffffffff81118015610a7f57600080fd5b50604051908082528060200260200182016040528015610aa9578160200160208202803683370190505b5090506060845167ffffffffffffffff81118015610ac657600080fd5b50604051908082528060200260200182016040528015610af0578160200160208202803683370190505b50905060005b855181101561053d57858181518110610b0b57fe5b6020026020010151600003828281518110610b2257fe5b6020908102919091010152600101610af6565b8035610b408161148b565b92915050565b600082601f830112610b56578081fd5b8135610b69610b648261146b565b611444565b818152915060208083019084810181840286018201871015610b8a57600080fd5b60005b84811015610bb2578135610ba08161148b565b84529282019290820190600101610b8d565b505050505092915050565b600082601f830112610bcd578081fd5b8135610bdb610b648261146b565b818152915060208083019084810181840286018201871015610bfc57600080fd5b60005b84811015610bb257813584529282019290820190600101610bff565b600082601f830112610c2b578081fd5b8151610c39610b648261146b565b818152915060208083019084810181840286018201871015610c5a57600080fd5b60005b84811015610bb257815184529282019290820190600101610c5d565b600082601f830112610c89578081fd5b813567ffffffffffffffff811115610c9f578182fd5b610cd060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611444565b9150808252836020828501011115610ce757600080fd5b8060208401602084013760009082016020015292915050565b803560028110610b4057600080fd5b6000610120808385031215610d22578182fd5b610d2b81611444565b915050610d388383610d00565b8152610d478360208401610b35565b6020820152610d598360408401610b35565b6040820152606082013560608201526080820135608082015260a082013560a0820152610d898360c08401610b35565b60c0820152610d9b8360e08401610b35565b60e08201526101008083013567ffffffffffffffff811115610dbc57600080fd5b610dc885828601610c79565b82840152505092915050565b600080600080600080600060e0888a031215610dee578283fd5b8735610df98161148b565b9650602088013595506040880135610e108161148b565b9450606088013567ffffffffffffffff80821115610e2c578485fd5b610e388b838c01610bbd565b955060808a0135945060a08a0135935060c08a0135915080821115610e5b578283fd5b50610e688a828b01610c79565b91505092959891949750929550565b600080600080600060a08688031215610e8e578081fd5b8535610e998161148b565b9450602086013567ffffffffffffffff80821115610eb5578283fd5b610ec189838a01610d0f565b95506040880135915080821115610ed6578283fd5b50610ee388828901610bbd565b9598949750949560608101359550608001359392505050565b60008060008060808587031215610f11578384fd5b8435610f1c8161148b565b9350602085013567ffffffffffffffff811115610f37578384fd5b610f4387828801610d0f565b949794965050505060408301359260600135919050565b60008060408385031215610f6c578182fd5b825167ffffffffffffffff80821115610f83578384fd5b610f8f86838701610c1b565b93506020850151915080821115610fa4578283fd5b50610fb185828601610c1b565b9150509250929050565b600060208284031215610fcc578081fd5b5035919050565b600080600060608486031215610fe7578081fd5b8335925060208085013567ffffffffffffffff80821115611006578384fd5b818701915087601f830112611019578384fd5b8135611027610b648261146b565b81815284810190848601868402860187018c1015611043578788fd5b8795505b8386101561106e57803561105a8161148b565b835260019590950194918601918601611047565b50965050506040870135925080831115611086578384fd5b505061109486828701610b46565b9150509250925092565b600080604083850312156110b0578182fd5b82359150602083013567ffffffffffffffff8111156110cd578182fd5b610fb185828601610bbd565b6000602082840312156110ea578081fd5b8135600381106110f8578182fd5b9392505050565b600060208284031215611110578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b8381101561117657815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611144565b509495945050505050565b6000815180845260208085019450808401835b8381101561117657815187529582019590820190600101611194565b60008151808452815b818110156111d5576020818501810151868301820152016111b9565b818111156111e65782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600061012082516002811061122a57fe5b8085525060208301516112406020860182611117565b5060408301516112536040860182611117565b50606083015160608501526080830151608085015260a083015160a085015260c083015161128460c0860182611117565b5060e083015161129760e0860182611117565b506101008084015182828701526112b0838701826111b0565b9695505050505050565b6000606082526112cd6060830186611131565b828103602084810191909152855180835286820192820190845b81811015611303578451835293830193918301916001016112e7565b505084810360408601526113178187611181565b98975050505050505050565b6000604082526113366040830185611131565b82810360208401526113488185611181565b95945050505050565b90815260200190565b600088825273ffffffffffffffffffffffffffffffffffffffff808916602084015280881660408401525060e0606083015261139960e0830187611181565b8560808401528460a084015282810360c08401526113b781856111b0565b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000608082526113f96080830187611219565b828103602084015261140b8187611181565b604084019590955250506060015292915050565b6000606082526114326060830186611219565b60208301949094525060400152919050565b60405181810167ffffffffffffffff8111828210171561146357600080fd5b604052919050565b600067ffffffffffffffff821115611481578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff811681146114ad57600080fd5b5056fea26469706673582212205e181fbd73e2ba475f7d8dc9b03c098a3f2247c508b2ecdfd609b4f97cbabe9664736f6c63430007010033";

export class MockVault__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    authorizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVault> {
    return super.deploy(authorizer, overrides || {}) as Promise<MockVault>;
  }
  getDeployTransaction(
    authorizer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(authorizer, overrides || {});
  }
  attach(address: string): MockVault {
    return super.attach(address) as MockVault;
  }
  connect(signer: Signer): MockVault__factory {
    return super.connect(signer) as MockVault__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultInterface {
    return new utils.Interface(_abi) as MockVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVault {
    return new Contract(address, _abi, signerOrProvider) as MockVault;
  }
}
