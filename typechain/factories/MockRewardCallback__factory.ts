/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockRewardCallback,
  MockRewardCallbackInterface,
} from "../MockRewardCallback";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "CallbackReceived",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "distributorCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610109806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806355c524c114602d575b600080fd5b603c6038366004606b565b603e565b005b6040517f75c6df91317619d52e205eeb6356f6ac5ae7fd8cf0c2de8f22b96d5294170dda90600090a15050565b60008060208385031215607c578182fd5b823567ffffffffffffffff808211156092578384fd5b818501915085601f83011260a4578384fd5b81358181111560b1578485fd5b86602082850101111560c1578485fd5b6020929092019691955090935050505056fea2646970667358221220cac7faf2b18359e7af3902739e32516d85177dec5bedf24d0b07de92f3efe4db64736f6c63430007030033";

export class MockRewardCallback__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockRewardCallback> {
    return super.deploy(overrides || {}) as Promise<MockRewardCallback>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockRewardCallback {
    return super.attach(address) as MockRewardCallback;
  }
  connect(signer: Signer): MockRewardCallback__factory {
    return super.connect(signer) as MockRewardCallback__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRewardCallbackInterface {
    return new utils.Interface(_abi) as MockRewardCallbackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRewardCallback {
    return new Contract(address, _abi, signerOrProvider) as MockRewardCallback;
  }
}
