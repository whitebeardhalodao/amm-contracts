/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestNumberConvert,
  TestNumberConvertInterface,
} from "../TestNumberConvert";

const _abi = [
  {
    inputs: [
      {
        internalType: "int128",
        name: "input",
        type: "int128",
      },
    ],
    name: "fromInt128ToUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "viewMaxInt128",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "viewMaxInt128ToInt256",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "viewMaxInt128ToInt256Bytes",
    outputs: [
      {
        internalType: "bytes16",
        name: "",
        type: "bytes16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "viewMaxInt128toUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80633bd8246f116100505780633bd8246f146100a6578063d886f7a1146100ae578063f532f0e2146100cd57610067565b806314dd1ce61461006c578063174abc981461009e575b600080fd5b61008c6004803603602081101561008257600080fd5b5035600f0b61010a565b60408051918252519081900360200190f35b61008c610138565b61008c610165565b6100b6610165565b60408051600f9290920b8252519081900360200190f35b6100d5610179565b604080517fffffffffffffffffffffffffffffffff000000000000000000000000000000009092168252519081900360200190f35b600080610116836101a1565b90506000610123826101aa565b905061012e8161024c565b925050505b919050565b6000806101546f7fffffffffffffffffffffffffffffff6101aa565b905061015f8161024c565b91505090565b6f7fffffffffffffffffffffffffffffff90565b600061019c6101976f7fffffffffffffffffffffffffffffff6101a1565b6101aa565b905090565b600f0b60401b90565b6000816101b957506000610133565b60008083136101cb57826000036101cd565b825b905060006101da8261030c565b905060708110156101f3578060700382901b9150610206565b6070811115610206576070810382901c91505b6dffffffffffffffffffffffffffff909116613fff820160701b17906000841215610241576f80000000000000000000000000000000821791505b5060801b9050610133565b6000617fff60f083901c16613fff81101561026b576000915050610133565b6f80000000000000000000000000000000608084901c1061028b57600080fd5b6140fe81111561029a57600080fd5b6e0100000000000000000000000000006dffffffffffffffffffffffffffff608085901c161761406f8210156102d65761406f8290031c610305565b61406f821115610305577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf9182011b5b9392505050565b600080821161031a57600080fd5b6000700100000000000000000000000000000000831061033c57608092831c92015b68010000000000000000831061035457604092831c92015b640100000000831061036857602092831c92015b62010000831061037a57601092831c92015b610100831061038b57600892831c92015b6010831061039b57600492831c92015b600483106103ab57600292831c92015b600283106103b7576001015b9291505056fea264697066735822122050b930ad14da6ee3c1f677f7c6a7315424e8ecbf2e5e5630ff46c99f3cbb231364736f6c63430007030033";

export class TestNumberConvert__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestNumberConvert> {
    return super.deploy(overrides || {}) as Promise<TestNumberConvert>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestNumberConvert {
    return super.attach(address) as TestNumberConvert;
  }
  connect(signer: Signer): TestNumberConvert__factory {
    return super.connect(signer) as TestNumberConvert__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestNumberConvertInterface {
    return new utils.Interface(_abi) as TestNumberConvertInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestNumberConvert {
    return new Contract(address, _abi, signerOrProvider) as TestNumberConvert;
  }
}
