/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockPoolPriceOracle,
  MockPoolPriceOracleInterface,
} from "../MockPoolPriceOracle";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "newSample",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sampleIndex",
        type: "uint256",
      },
    ],
    name: "PriceDataProcessed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
    ],
    name: "decode",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endIndex",
        type: "uint256",
      },
    ],
    name: "dirtyUninitializedOracleSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "encode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "dates",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "findNearestSamplesTimestamp",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "prev",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
        ],
        internalType: "struct MockPoolPriceOracle.BinarySearchResult[]",
        name: "results",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLargestSafeQueryWindow",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPriceOracle.Variable",
        name: "variable",
        type: "uint8",
      },
    ],
    name: "getLatest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPriceOracle.Variable",
        name: "variable",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getPastAccumulator",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IPriceOracle.Variable",
            name: "variable",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "ago",
            type: "uint256",
          },
        ],
        internalType: "struct IPriceOracle.OracleAccumulatorQuery[]",
        name: "queries",
        type: "tuple[]",
      },
    ],
    name: "getPastAccumulators",
    outputs: [
      {
        internalType: "int256[]",
        name: "results",
        type: "int256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getSample",
    outputs: [
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IPriceOracle.Variable",
            name: "variable",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "secs",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ago",
            type: "uint256",
          },
        ],
        internalType: "struct IPriceOracle.OracleAverageQuery[]",
        name: "queries",
        type: "tuple[]",
      },
    ],
    name: "getTimeWeightedAverage",
    outputs: [
      {
        internalType: "uint256[]",
        name: "results",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSamples",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "mockOracleIndex",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "mockSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "indexes",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample[]",
        name: "samples",
        type: "tuple[]",
      },
    ],
    name: "mockSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elapsed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
    ],
    name: "processPriceData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "update",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061154c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b10be73911610097578063d5125db611610066578063d5125db614610230578063e5fe5f3c14610243578063ff7b6f1e14610256578063ffd088eb1461026957610100565b8063b10be739146101d5578063b48b5b40146101e8578063c3748ef1146101f0578063d43768041461021057610100565b80633d48f8c1116100d35780633d48f8c11461017657806360d1507c1461018957806368a54df2146101af5780636b843239146101c257610100565b80631dccd83014610105578063259efd161461012e578063264959fb146101435780633331bc3614610163575b600080fd5b610118610113366004610fcb565b610271565b604051610125919061130e565b60405180910390f35b61014161013c36600461129b565b610395565b005b610156610151366004611236565b6103b4565b60405161012591906113b1565b6101416101713660046112c8565b6103cb565b610156610184366004611280565b610443565b61019c6101973660046111a0565b610478565b60405161012597969594939291906113ba565b6101416101bd3660046111a0565b6104c1565b6101186101d0366004610efc565b6104c6565b6101566101e3366004611215565b61057d565b610156610612565b6102036101fe3660046111a0565b610618565b6040516101259190611486565b61022361021e36600461115d565b61069d565b6040516101259190611352565b61014161023e3660046112e9565b6107b4565b610141610251366004611098565b61080e565b6102036102643660046111db565b610857565b610156610884565b6060815167ffffffffffffffff8111801561028b57600080fd5b506040519080825280602002602001820160405280156102b5578160200160208202803683370190505b50905060006102c261088b565b905060005b835181101561038e5773__$c67ecf103c5467c5c8a67dcc69c08c9103$__6379eaef8260008684815181106102f857fe5b6020026020010151856040518463ffffffff1660e01b815260040161031f93929190611432565b60206040518083038186803b15801561033757600080fd5b505af415801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190611268565b83828151811061037b57fe5b60209081029190910101526001016102c7565b5050919050565b61039e81610443565b6000928352602083905260409092209190915550565b60006103c38484844203610891565b949350505050565b6103e681831080156103df57506104008211155b606461093a565b60006103fb600160008060008060008061094c565b9050825b8281101561043d5760008181526020819052604090205461041f906109ac565b6104355760008181526020819052604090208290555b6001016103ff565b50505050565b6000610470826000015183602001518460400151856060015186608001518760a001518860c0015161094c565b90505b919050565b6000806000806000806000610493610400891061013b61093a565b600061049e896109b8565b90506104a9816109ca565b959f949e50929c50909a509850965090945092505050565b600155565b6060815167ffffffffffffffff811180156104e057600080fd5b5060405190808252806020026020018201604052801561050a578160200160208202803683370190505b509050600061051761088b565b9050610521610d9f565b60005b84518110156105755784818151811061053957fe5b602002602001015191506105568260000151848460200151610891565b84828151811061056257fe5b6020908102919091010152600101610524565b505050919050565b600073__$c67ecf103c5467c5c8a67dcc69c08c9103$__630397bee06000846105a461088b565b6040518463ffffffff1660e01b81526004016105c2939291906113ea565b60206040518083038186803b1580156105da57600080fd5b505af41580156105ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190611268565b61040090565b610620610db6565b6040805160e0810190915280610637846000610a2d565b8152602001610647846000610a7e565b8152602001610657846001610a2d565b8152602001610667846001610a7e565b8152602001610677846002610a2d565b8152602001610687846002610a7e565b8152602001610695846109ac565b905292915050565b606060006106ac600154610ac2565b905060006106b9826109b8565b905060006106c6826109ac565b905060008082116106d757836106db565b6104005b9050865167ffffffffffffffff811180156106f557600080fd5b5060405190808252806020026020018201604052801561072f57816020015b61071c610df3565b8152602001906001900390816107145790505b50945060005b87518110156107a95760008061075f8a848151811061075057fe5b60200260200101518a86610acf565b915091506040518060400160405280610777846109ac565b8152602001610785836109ac565b81525088848151811061079457fe5b60209081029190910101525050600101610735565b505050505092915050565b4285900360006107c78287878787610b6b565b90507fa7f3e984c65d79d0fa58244dddb6522f661c9dea23fe4940801cbfe08810750686821415826040516107fd9291906113a1565b60405180910390a150505050505050565b60005b82518110156108525761084a83828151811061082957fe5b602002602001015183838151811061083d57fe5b6020026020010151610395565b600101610811565b505050565b61085f610db6565b600061086e8787878787610bc2565b905061087981610618565b979650505050505050565b6201de2090565b60015490565b6040517f34171a8500000000000000000000000000000000000000000000000000000000815260009073__$c67ecf103c5467c5c8a67dcc69c08c9103$__906334171a85906108ea90849088908890889060040161140c565b60206040518083038186803b15801561090257600080fd5b505af4158015610916573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190611268565b816109485761094881610c22565b5050565b60006109588282610c8f565b61096384601f610c93565b61096e866054610ca4565b61097988606a610c93565b6109848a609f610ca4565b61098f8c60b5610c93565b61099a8e60ea610ca4565b17171717171798975050505050505050565b60006104708282610cb1565b60009081526020819052604090205490565b60008060008060008060006109de88610cbb565b96506109e988610cc8565b95506109f488610cd5565b94506109ff88610ce2565b9350610a0a88610cef565b9250610a1588610cfc565b9150610a20886109ac565b9050919395979092949650565b600080826002811115610a3c57fe5b1415610a5257610a4b83610cbb565b9050610a78565b6001826002811115610a6057fe5b1415610a6f57610a4b83610cd5565b610a4b83610cef565b92915050565b600080826002811115610a8d57fe5b1415610a9c57610a4b83610cc8565b6001826002811115610aaa57fe5b1415610ab957610a4b83610ce2565b610a4b83610cfc565b6000610470826001610d09565b60008073__$c67ecf103c5467c5c8a67dcc69c08c9103$__633d60fb0a60008787876040518563ffffffff1660e01b8152600401610b10949392919061146b565b604080518083038186803b158015610b2757600080fd5b505af4158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f91906111b8565b91509150935093915050565b600080610b8785858542610b7e8b6109b8565b93929190610bc2565b9050607842889003101580610b9c5786610ba5565b610ba587610ac2565b600081815260208190526040902092909255509695505050505050565b600080610bce876109ac565b830390506000818702610be089610cc8565b0190506000828702610bf18a610ce2565b0190506000838702610c028b610cfc565b019050610c1489848a858b868c61094c565b9a9950505050505050505050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b1c637fffffff1690565b60006104708260ea610d11565b60006104708260b5610d54565b600061047082609f610d11565b600061047082606a610d54565b6000610470826054610d11565b600061047082601f610d54565b016103ff1690565b600082821c623fffff16621fffff8113610d2b57806103c3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00000179392505050565b600082821c661fffffffffffff16660fffffffffffff8113610d7657806103c3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000000179392505050565b604080518082019091526000808252602082015290565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b600082601f830112610e1d578081fd5b8135610e30610e2b826114f8565b6114d4565b818152915060208083019084810181840286018201871015610e5157600080fd5b60005b848110156107a957813584529282019290820190600101610e54565b80356003811061047357600080fd5b600060e08284031215610e90578081fd5b60405160e0810181811067ffffffffffffffff82111715610ead57fe5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b60006020808385031215610f0e578182fd5b823567ffffffffffffffff80821115610f25578384fd5b818501915085601f830112610f38578384fd5b8135610f46610e2b826114f8565b818152848101908486016040808502870188018b1015610f64578889fd5b8896505b84871015610fbc5780828c031215610f7e578889fd5b80518181018181108882111715610f9157fe5b8252610f9c83610e70565b815282890135898201528452600196909601959287019290810190610f68565b50909998505050505050505050565b60006020808385031215610fdd578182fd5b823567ffffffffffffffff80821115610ff4578384fd5b818501915085601f830112611007578384fd5b8135611015610e2b826114f8565b818152848101908486016060808502870188018b1015611033578889fd5b8896505b84871015610fbc5780828c03121561104d578889fd5b60408051828101818110898211171561106257fe5b825261106d84610e70565b8152838a01358a82015281840135918101919091528452600196909601959287019290810190611037565b600080604083850312156110aa578081fd5b823567ffffffffffffffff808211156110c1578283fd5b6110cd86838701610e0d565b93506020915081850135818111156110e3578384fd5b85019050601f810186136110f5578283fd5b8035611103610e2b826114f8565b8181528381019083850160e0808502860187018b1015611121578788fd5b8795505b8486101561114d576111378b83610e7f565b8452600195909501949286019290810190611125565b5096999098509650505050505050565b6000806040838503121561116f578182fd5b823567ffffffffffffffff811115611185578283fd5b61119185828601610e0d565b95602094909401359450505050565b6000602082840312156111b1578081fd5b5035919050565b600080604083850312156111ca578182fd5b505080516020909101519092909150565b600080600080600060a086880312156111f2578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600060208284031215611226578081fd5b61122f82610e70565b9392505050565b60008060006060848603121561124a578081fd5b61125384610e70565b95602085013595506040909401359392505050565b600060208284031215611279578081fd5b5051919050565b600060e08284031215611291578081fd5b61122f8383610e7f565b60008061010083850312156112ae578182fd5b823591506112bf8460208501610e7f565b90509250929050565b600080604083850312156112da578182fd5b50508035926020909101359150565b600080600080600060a086880312156111f2578283fd5b6003811061130a57fe5b9052565b6020808252825182820181905260009190848201906040850190845b818110156113465783518352928401929184019160010161132a565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156113945781518051855286015186850152928401929085019060010161136f565b5091979650505050505050565b9115158252602082015260400190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b838152606081016113fe6020830185611300565b826040830152949350505050565b848152608081016114206020830186611300565b60408201939093526060015292915050565b600060a08201905084825261144b602083018551611300565b602084015160408381019190915290930151606082015260800152919050565b93845260208401929092526040830152606082015260800190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b60405181810167ffffffffffffffff811182821017156114f057fe5b604052919050565b600067ffffffffffffffff82111561150c57fe5b506020908102019056fea2646970667358221220035d4b3e55735a4dd29e7cca84b2f484ff5bcf976aed2aba73558612f22436aa64736f6c63430007030033";

type MockPoolPriceOracleConstructorParams =
  | [linkLibraryAddresses: MockPoolPriceOracleLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPoolPriceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MockPoolPriceOracle__factory extends ContractFactory {
  constructor(...args: MockPoolPriceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MockPoolPriceOracle__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MockPoolPriceOracleLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$c67ecf103c5467c5c8a67dcc69c08c9103\\$__", "g"),
      linkLibraryAddresses[
        "contracts/balancer-core-v2/pool-utils/contracts/oracle/QueryProcessor.sol:QueryProcessor"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPoolPriceOracle> {
    return super.deploy(overrides || {}) as Promise<MockPoolPriceOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockPoolPriceOracle {
    return super.attach(address) as MockPoolPriceOracle;
  }
  connect(signer: Signer): MockPoolPriceOracle__factory {
    return super.connect(signer) as MockPoolPriceOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPoolPriceOracleInterface {
    return new utils.Interface(_abi) as MockPoolPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPoolPriceOracle {
    return new Contract(address, _abi, signerOrProvider) as MockPoolPriceOracle;
  }
}

export interface MockPoolPriceOracleLibraryAddresses {
  ["contracts/balancer-core-v2/pool-utils/contracts/oracle/QueryProcessor.sol:QueryProcessor"]: string;
}
