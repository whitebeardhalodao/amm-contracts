/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockPoolPriceOracle,
  MockPoolPriceOracleInterface,
} from "../MockPoolPriceOracle";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "newSample",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sampleIndex",
        type: "uint256",
      },
    ],
    name: "PriceDataProcessed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
    ],
    name: "decode",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endIndex",
        type: "uint256",
      },
    ],
    name: "dirtyUninitializedOracleSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "encode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "dates",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "findNearestSamplesTimestamp",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "prev",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
        ],
        internalType: "struct MockPoolPriceOracle.BinarySearchResult[]",
        name: "results",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLargestSafeQueryWindow",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPriceOracle.Variable",
        name: "variable",
        type: "uint8",
      },
    ],
    name: "getLatest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPriceOracle.Variable",
        name: "variable",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getPastAccumulator",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IPriceOracle.Variable",
            name: "variable",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "ago",
            type: "uint256",
          },
        ],
        internalType: "struct IPriceOracle.OracleAccumulatorQuery[]",
        name: "queries",
        type: "tuple[]",
      },
    ],
    name: "getPastAccumulators",
    outputs: [
      {
        internalType: "int256[]",
        name: "results",
        type: "int256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getSample",
    outputs: [
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IPriceOracle.Variable",
            name: "variable",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "secs",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ago",
            type: "uint256",
          },
        ],
        internalType: "struct IPriceOracle.OracleAverageQuery[]",
        name: "queries",
        type: "tuple[]",
      },
    ],
    name: "getTimeWeightedAverage",
    outputs: [
      {
        internalType: "uint256[]",
        name: "results",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSamples",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "mockOracleIndex",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "mockSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "indexes",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample[]",
        name: "samples",
        type: "tuple[]",
      },
    ],
    name: "mockSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elapsed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
    ],
    name: "processPriceData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "update",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611515806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b10be73911610097578063d5125db611610066578063d5125db614610230578063e5fe5f3c14610243578063ff7b6f1e14610256578063ffd088eb1461026957610100565b8063b10be739146101d5578063b48b5b40146101e8578063c3748ef1146101f0578063d43768041461021057610100565b80633d48f8c1116100d35780633d48f8c11461017657806360d1507c1461018957806368a54df2146101af5780636b843239146101c257610100565b80631dccd83014610105578063259efd161461012e578063264959fb146101435780633331bc3614610163575b600080fd5b610118610113366004610f99565b610271565b60405161012591906112be565b60405180910390f35b61014161013c366004611259565b610395565b005b6101566101513660046111f3565b6103b4565b6040516101259190611361565b610141610171366004611286565b6103cb565b61015661018436600461123e565b610443565b61019c61019736600461115c565b610476565b604051610125979695949392919061136a565b6101416101bd36600461115c565b6104bf565b6101186101d0366004610eda565b6104c4565b6101566101e33660046111d1565b61057b565b610156610610565b6102036101fe36600461115c565b610616565b604051610125919061143d565b61022361021e366004611119565b61069b565b6040516101259190611302565b61014161023e3660046112a7565b6107b2565b610141610251366004611054565b61080c565b610203610264366004611197565b610855565b610156610882565b6060815167ffffffffffffffff8111801561028b57600080fd5b506040519080825280602002602001820160405280156102b5578160200160208202803683370190505b50905060006102c2610889565b905060005b835181101561038e5773__$c67ecf103c5467c5c8a67dcc69c08c9103$__6379eaef8260008684815181106102f857fe5b6020026020010151856040518463ffffffff1660e01b815260040161031f939291906113e6565b60206040518083038186803b15801561033757600080fd5b505af415801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190611226565b83828151811061037b57fe5b60209081029190910101526001016102c7565b5050919050565b61039e81610443565b6000928352602083905260409092209190915550565b60006103c3848484420361088f565b949350505050565b6103e681831080156103df57506104008211155b6064610938565b60006103fb600160008060008060008061094a565b9050825b8281101561043d5760008181526020819052604090205461041f906109aa565b6104355760008181526020819052604090208290555b6001016103ff565b50505050565b6000610470826000015183602001518460400151856060015186608001518760a001518860c0015161094a565b92915050565b6000806000806000806000610491610400891061013b610938565b600061049c896109b6565b90506104a7816109c8565b959f949e50929c50909a509850965090945092505050565b600155565b6060815167ffffffffffffffff811180156104de57600080fd5b50604051908082528060200260200182016040528015610508578160200160208202803683370190505b5090506000610515610889565b905061051f610d97565b60005b84518110156105735784818151811061053757fe5b60200260200101519150610554826000015184846020015161088f565b84828151811061056057fe5b6020908102919091010152600101610522565b505050919050565b600073__$c67ecf103c5467c5c8a67dcc69c08c9103$__630397bee06000846105a2610889565b6040518463ffffffff1660e01b81526004016105c09392919061139a565b60206040518083038186803b1580156105d857600080fd5b505af41580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190611226565b61040090565b61061e610dae565b6040805160e0810190915280610635846000610a2b565b8152602001610645846000610a76565b8152602001610655846001610a2b565b8152602001610665846001610a76565b8152602001610675846002610a2b565b8152602001610685846002610a76565b8152602001610693846109aa565b905292915050565b606060006106aa600154610aba565b905060006106b7826109b6565b905060006106c4826109aa565b905060008082116106d557836106d9565b6104005b9050865167ffffffffffffffff811180156106f357600080fd5b5060405190808252806020026020018201604052801561072d57816020015b61071a610deb565b8152602001906001900390816107125790505b50945060005b87518110156107a75760008061075d8a848151811061074e57fe5b60200260200101518a86610ac7565b915091506040518060400160405280610775846109aa565b8152602001610783836109aa565b81525088848151811061079257fe5b60209081029190910101525050600101610733565b505050505092915050565b4285900360006107c58287878787610b63565b90507fa7f3e984c65d79d0fa58244dddb6522f661c9dea23fe4940801cbfe08810750686821415826040516107fb929190611351565b60405180910390a150505050505050565b60005b82518110156108505761084883828151811061082757fe5b602002602001015183838151811061083b57fe5b6020026020010151610395565b60010161080f565b505050565b61085d610dae565b600061086c8787878787610bba565b905061087781610616565b979650505050505050565b6201de2090565b60015490565b6040517f34171a8500000000000000000000000000000000000000000000000000000000815260009073__$c67ecf103c5467c5c8a67dcc69c08c9103$__906334171a85906108e89084908890889088906004016113bb565b60206040518083038186803b15801561090057600080fd5b505af4158015610914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c39190611226565b816109465761094681610c1a565b5050565b60006109568282610c87565b61096184601f610c8b565b61096c866054610c9c565b61097788606a610c8b565b6109828a609f610c9c565b61098d8c60b5610c8b565b6109988e60ea610c9c565b17171717171798975050505050505050565b60006104708282610ca9565b60009081526020819052604090205490565b60008060008060008060006109dc88610cb3565b96506109e788610cc0565b95506109f288610ccd565b94506109fd88610cda565b9350610a0888610ce7565b9250610a1388610cf4565b9150610a1e886109aa565b9050919395979092949650565b600080826002811115610a3a57fe5b1415610a5057610a4983610cb3565b9050610470565b6001826002811115610a5e57fe5b1415610a6d57610a4983610ccd565b610a4983610ce7565b600080826002811115610a8557fe5b1415610a9457610a4983610cc0565b6001826002811115610aa257fe5b1415610ab157610a4983610cda565b610a4983610cf4565b6000610470826001610d01565b60008073__$c67ecf103c5467c5c8a67dcc69c08c9103$__633d60fb0a60008787876040518563ffffffff1660e01b8152600401610b089493929190611422565b604080518083038186803b158015610b1f57600080fd5b505af4158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b579190611174565b91509150935093915050565b600080610b7f85858542610b768b6109b6565b93929190610bba565b9050607842889003101580610b945786610b9d565b610b9d87610aba565b600081815260208190526040902092909255509695505050505050565b600080610bc6876109aa565b830390506000818702610bd889610cc0565b0190506000828702610be98a610cda565b0190506000838702610bfa8b610cf4565b019050610c0c89848a858b868c61094a565b9a9950505050505050505050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b1c637fffffff1690565b60006104708260ea610d09565b60006104708260b5610d4c565b600061047082609f610d09565b600061047082606a610d4c565b6000610470826054610d09565b600061047082601f610d4c565b016103ff1690565b600082821c623fffff16621fffff8113610d2357806103c3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00000179392505050565b600082821c661fffffffffffff16660fffffffffffff8113610d6e57806103c3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000000179392505050565b604080518082019091526000808252602082015290565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b600082601f830112610e15578081fd5b8135610e28610e23826114b2565b61148b565b818152915060208083019084810181840286018201871015610e4957600080fd5b60005b848110156107a757813584529282019290820190600101610e4c565b80356003811061047057600080fd5b600060e08284031215610e88578081fd5b610e9260e061148b565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015292915050565b60006020808385031215610eec578182fd5b823567ffffffffffffffff811115610f02578283fd5b8301601f81018513610f12578283fd5b8035610f20610e23826114b2565b818152838101908385016040808502860187018a1015610f3e578788fd5b8795505b84861015610f8b5780828b031215610f58578788fd5b610f618161148b565b610f6b8b84610e68565b815282880135888201528452600195909501949286019290810190610f42565b509098975050505050505050565b60006020808385031215610fab578182fd5b823567ffffffffffffffff811115610fc1578283fd5b8301601f81018513610fd1578283fd5b8035610fdf610e23826114b2565b818152838101908385016060808502860187018a1015610ffd578788fd5b8795505b84861015610f8b5780828b031215611017578788fd5b6110208161148b565b61102a8b84610e68565b81528288013588820152604080840135908201528452600195909501949286019290810190611001565b60008060408385031215611066578081fd5b823567ffffffffffffffff8082111561107d578283fd5b61108986838701610e05565b935060209150818501358181111561109f578384fd5b85019050601f810186136110b1578283fd5b80356110bf610e23826114b2565b8181528381019083850160e0808502860187018b10156110dd578788fd5b8795505b84861015611109576110f38b83610e77565b84526001959095019492860192908101906110e1565b5096999098509650505050505050565b6000806040838503121561112b578182fd5b823567ffffffffffffffff811115611141578283fd5b61114d85828601610e05565b95602094909401359450505050565b60006020828403121561116d578081fd5b5035919050565b60008060408385031215611186578182fd5b505080516020909101519092909150565b600080600080600060a086880312156111ae578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156111e2578081fd5b6111ec8383610e68565b9392505050565b600080600060608486031215611207578081fd5b6112118585610e68565b95602085013595506040909401359392505050565b600060208284031215611237578081fd5b5051919050565b600060e0828403121561124f578081fd5b6111ec8383610e77565b600080610100838503121561126c578182fd5b8235915061127d8460208501610e77565b90509250929050565b60008060408385031215611298578182fd5b50508035926020909101359150565b600080600080600060a086880312156111ae578283fd5b6020808252825182820181905260009190848201906040850190845b818110156112f6578351835292840192918401916001016112da565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156113445781518051855286015186850152928401929085019060010161131f565b5091979650505050505050565b9115158252602082015260400190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b838152606081016113aa846114d2565b602082019390935260400152919050565b848152608081016113cb856114d2565b84602083015283604083015282606083015295945050505050565b838152825160a08201906113f9816114d2565b806020840152506020840151604083015260408401516060830152826080830152949350505050565b93845260208401929092526040830152606082015260800190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b60405181810167ffffffffffffffff811182821017156114aa57600080fd5b604052919050565b600067ffffffffffffffff8211156114c8578081fd5b5060209081020190565b600381106114dc57fe5b5056fea26469706673582212208ea9dde63d1b8bfa07db156568ba955b7ace62cb691d535f81427fd67b772e4364736f6c63430007010033";

type MockPoolPriceOracleConstructorParams =
  | [linkLibraryAddresses: MockPoolPriceOracleLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPoolPriceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MockPoolPriceOracle__factory extends ContractFactory {
  constructor(...args: MockPoolPriceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MockPoolPriceOracle__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MockPoolPriceOracleLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$c67ecf103c5467c5c8a67dcc69c08c9103\\$__", "g"),
      linkLibraryAddresses[
        "contracts/balancer-core-v2/pool-utils/contracts/oracle/QueryProcessor.sol:QueryProcessor"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPoolPriceOracle> {
    return super.deploy(overrides || {}) as Promise<MockPoolPriceOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockPoolPriceOracle {
    return super.attach(address) as MockPoolPriceOracle;
  }
  connect(signer: Signer): MockPoolPriceOracle__factory {
    return super.connect(signer) as MockPoolPriceOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPoolPriceOracleInterface {
    return new utils.Interface(_abi) as MockPoolPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPoolPriceOracle {
    return new Contract(address, _abi, signerOrProvider) as MockPoolPriceOracle;
  }
}

export interface MockPoolPriceOracleLibraryAddresses {
  ["contracts/balancer-core-v2/pool-utils/contracts/oracle/QueryProcessor.sol:QueryProcessor"]: string;
}
