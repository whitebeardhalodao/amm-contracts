/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MerkleOrchard, MerkleOrchardInterface } from "../MerkleOrchard";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "distributor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "distributionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DistributionAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "distributor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "distributionId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DistributionClaimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "distributionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "distributor",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]",
          },
        ],
        internalType: "struct MerkleOrchard.Claim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "claimDistributions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "distributionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "distributor",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]",
          },
        ],
        internalType: "struct MerkleOrchard.Claim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "claimDistributionsToInternalBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "distributionId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "distributor",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]",
          },
        ],
        internalType: "struct MerkleOrchard.Claim[]",
        name: "claims",
        type: "tuple[]",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "contract IDistributorCallback",
        name: "callbackContract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "callbackData",
        type: "bytes",
      },
    ],
    name: "claimDistributionsWithCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "distributionId",
        type: "uint256",
      },
    ],
    name: "createDistribution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "distributor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "distributionId",
        type: "uint256",
      },
    ],
    name: "getDistributionRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "distributor",
        type: "address",
      },
    ],
    name: "getNextDistributionId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "distributor",
        type: "address",
      },
    ],
    name: "getRemainingBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "distributor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "distributionId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "distributor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "distributionId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "claimedBalance",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "verifyClaim",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161197938038061197983398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6118ea61008f600039806102da52506118ea6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638d928af811610076578063ece123541161005b578063ece123541461016f578063fb97812814610182578063fea7364914610195576100be565b80638d928af814610147578063a68d1e9d1461015c576100be565b806362c8b7c9116100a757806362c8b7c91461010157806381ae8541146101145780638bf3e45714610134576100be565b80632b630140146100c3578063515ac052146100d8575b600080fd5b6100d66100d13660046111b2565b6101a8565b005b6100eb6100e636600461139f565b6101bb565b6040516100f89190611650565b60405180910390f35b6100eb61010f3660046113f1565b610226565b610127610122366004611327565b61024e565b6040516100f8919061165b565b6100d66101423660046111b2565b610272565b61014f6102d8565b6040516100f891906116b1565b6100d661016a366004611225565b6102fc565b6100d661017d366004611476565b6103e7565b610127610190366004611327565b6106a0565b6101276101a336600461135f565b6106c4565b6101b68384848460006106f5565b505050565b60008060006101c985610b21565b9150915060006101d98888610b2f565b600090815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845282528083209583529490529290922054600190911b161515915050949350505050565b6000806102338888610b2f565b90506102428187878787610b62565b98975050505050505050565b60008061025b8484610b2f565b600090815260036020526040902054949350505050565b3373ffffffffffffffffffffffffffffffffffffffff8416146102ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c1906117d4565b60405180910390fd5b6101b68384848460016106f5565b7f000000000000000000000000000000000000000000000000000000000000000090565b3373ffffffffffffffffffffffffffffffffffffffff87161461034b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c1906117d4565b6103598684878760016106f5565b6040517f55c524c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906355c524c1906103ad9085908590600401611664565b600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b50505050505050505050565b3360006103f48683610b2f565b60008181526020819052604090205490915083148061041f5750600081815260208190526040902054155b610455576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c1906116d2565b61047773ffffffffffffffffffffffffffffffffffffffff8716833087610bdd565b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b361049b6102d8565b866040518363ffffffff1660e01b81526004016104b9929190611597565b602060405180830381600087803b1580156104d357600080fd5b505af11580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b9190611300565b50604080516001808252818301909252606091816020015b61052b610f5f565b8152602001906001900390816105235750506040805160a081018252600080825273ffffffffffffffffffffffffffffffffffffffff8b1660208301529181018890523060608201819052608082015282519293509183919061058a57fe5b602002602001018190525061059d6102d8565b73ffffffffffffffffffffffffffffffffffffffff16630e8e3e84826040518263ffffffff1660e01b81526004016105d591906115bd565b600060405180830381600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b505050600083815260036020908152604080832080548a019055600180835281842089855283528184208b9055868452918390529182902090870190555173ffffffffffffffffffffffffffffffffffffffff808a1692508516907f24a80c4e3ef74c732b163bfb2decfbe077a51aef3b708c93f8ef3dd06fc3ea7c9061068f9088908b908b90611837565b60405180910390a350505050505050565b6000806106ad8484610b2f565b600090815260208190526040902054949350505050565b6000806106d18585610b2f565b60009081526001602090815260408083208684529091529020549150509392505050565b6060825167ffffffffffffffff8111801561070f57600080fd5b50604051908082528060200260200182016040528015610739578160200160208202803683370190505b50905060008060008061074a610f8f565b60005b895181101561096f5789818151811061076257fe5b6020026020010151915060008061077c8460000151610b21565b915091506107a58b85606001518151811061079357fe5b60200260200101518560400151610b2f565b8814156107e757818714156107c257806001901b861795506107d9565b6107ce888f8989610c86565b819650806001901b95505b83602001518501945061082a565b8715610803576107f9888f8989610c86565b6108038886610d3a565b6108168b85606001518151811061079357fe5b9750819650806001901b9550836020015194505b505060018a510381141561084e57610844868d8787610c86565b61084e8684610d3a565b6108678683600001518e85602001518660800151610b62565b61089d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c19061179d565b8160200151878360600151815181106108b257fe5b6020026020010181815101915081815250508b73ffffffffffffffffffffffffffffffffffffffff16898360600151815181106108eb57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff167ff3f33f2319d28d6a1402aa9e6ca0ae16d3ada035d576b3b8074b422aaa03b69885600001518f876020015160405161095f9392919061180b565b60405180910390a460010161074d565b5060008761097e576001610981565b60025b90506060895167ffffffffffffffff8111801561099d57600080fd5b506040519080825280602002602001820160405280156109d757816020015b6109c4610f5f565b8152602001906001900390816109bc5790505b50905060005b8a51811015610a9f576040518060a001604052808460038111156109fd57fe5b81526020018c8381518110610a0e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018a8381518110610a3d57fe5b602002602001015181526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff16815250828281518110610a8c57fe5b60209081029190910101526001016109dd565b50610aa86102d8565b73ffffffffffffffffffffffffffffffffffffffff16630e8e3e84826040518263ffffffff1660e01b8152600401610ae091906115bd565b600060405180830381600087803b158015610afa57600080fd5b505af1158015610b0e573d6000803e3d6000fd5b5050505050505050505050505050505050565b61010081049160ff90911690565b60008282604051602001610b4492919061152c565b60405160208183030381529060405280519060200120905092915050565b6000808484604051602001610b789291906114b0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152815160209283012060008a8152600184528281208a8252909352912054909150610bd290849083610d9b565b979650505050505050565b610c80846323b872dd60e01b858585604051602401610bfe93929190611566565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e38565b50505050565b600084815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452825280832085845290915290205481811615610cf8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c190611709565b600094855260026020908152604080872073ffffffffffffffffffffffffffffffffffffffff9096168752948152848620938652929092529190922091179055565b600082815260036020526040902054811115610d82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c190611740565b6000918252600360205260409091208054919091039055565b600081815b8551811015610e2d576000868281518110610db757fe5b60200260200101519050808311610df8578281604051602001610ddb9291906114e5565b604051602081830303815290604052805190602001209250610e24565b8083604051602001610e0b9291906114e5565b6040516020818303038152906040528051906020012092505b50600101610da0565b509092149392505050565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610e6191906114f3565b6000604051808303816000865af19150503d8060008114610e9e576040519150601f19603f3d011682016040523d82523d6000602084013e610ea3565b606091505b50915091506000821415610ebb573d6000803e3d6000fd5b610c80815160001480610edd575081806020019051810190610edd9190611300565b6101a281610eee57610eee81610ef2565b5050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6040805160a081019091528060008152600060208201819052604082018190526060820181905260809091015290565b6040518060a001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081525090565b8035610fdf8161188f565b919050565b600082601f830112610ff4578081fd5b813561100761100282611871565b61184d565b81815291506020808301908481018184028601820187101561102857600080fd5b60005b848110156110475781358452928201929082019060010161102b565b505050505092915050565b600082601f830112611062578081fd5b813561107061100282611871565b81815291506020808301908481018184028601820187101561109157600080fd5b60005b848110156110475781356110a78161188f565b84529282019290820190600101611094565b600082601f8301126110c9578081fd5b81356110d761100282611871565b818152915060208083019084810160005b84811015611047578135870160a0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c0301121561112757600080fd5b6040805182810167ffffffffffffffff828210818311171561114557fe5b9083528488013582528483013582890152606090611164828701610fd4565b848401526080935083860135828401528486013594508085111561118757600080fd5b50506111978c8885870101610fe4565b918101919091528652505092820192908201906001016110e8565b6000806000606084860312156111c6578283fd5b83356111d18161188f565b9250602084013567ffffffffffffffff808211156111ed578384fd5b6111f9878388016110b9565b9350604086013591508082111561120e578283fd5b5061121b86828701611052565b9150509250925092565b60008060008060008060a0878903121561123d578182fd5b86356112488161188f565b9550602087013567ffffffffffffffff80821115611264578384fd5b6112708a838b016110b9565b96506040890135915080821115611285578384fd5b6112918a838b01611052565b9550606089013591506112a38261188f565b909350608088013590808211156112b8578384fd5b818901915089601f8301126112cb578384fd5b8135818111156112d9578485fd5b8a60208285010111156112ea578485fd5b6020830194508093505050509295509295509295565b600060208284031215611311578081fd5b81518015158114611320578182fd5b9392505050565b60008060408385031215611339578182fd5b82356113448161188f565b915060208301356113548161188f565b809150509250929050565b600080600060608486031215611373578283fd5b833561137e8161188f565b9250602084013561138e8161188f565b929592945050506040919091013590565b600080600080608085870312156113b4578384fd5b84356113bf8161188f565b935060208501356113cf8161188f565b92506040850135915060608501356113e68161188f565b939692955090935050565b60008060008060008060c08789031215611409578182fd5b86356114148161188f565b955060208701356114248161188f565b945060408701359350606087013561143b8161188f565b92506080870135915060a087013567ffffffffffffffff81111561145d578182fd5b61146989828a01610fe4565b9150509295509295509295565b6000806000806080858703121561148b578182fd5b84356114968161188f565b966020860135965060408601359560600135945092505050565b60609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252601482015260340190565b918252602082015260400190565b60008251815b8181101561151357602081860181015185830152016114f9565b818111156115215782828501525b509190910192915050565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811682529190921b16601482015260280190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b828110156116435781518051600481106115f057fe5b85528087015173ffffffffffffffffffffffffffffffffffffffff908116888701528682015187870152606080830151821690870152608091820151169085015260a090930192908501906001016115da565b5091979650505050505050565b901515815260200190565b90815260200190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526017908201527f696e76616c696420646973747269627574696f6e204944000000000000000000604082015260600190565b60208082526012908201527f63616e6e6f7420636c61696d2074776963650000000000000000000000000000604082015260600190565b60208082526037908201527f6469737472696275746f72206861736e27742070726f7669646564207375666660408201527f696369656e7420746f6b656e7320666f7220636c61696d000000000000000000606082015260800190565b60208082526016908201527f696e636f7272656374206d65726b6c652070726f6f6600000000000000000000604082015260600190565b6020808252601b908201527f75736572206d75737420636c61696d206f776e2062616c616e63650000000000604082015260600190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561186957fe5b604052919050565b600067ffffffffffffffff82111561188557fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff811681146118b157600080fd5b5056fea2646970667358221220ef0d885087542bd4f78b2055eb0439c7ac1d30d8e15c9be7e41291cee37b4f1c64736f6c63430007030033";

export class MerkleOrchard__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleOrchard> {
    return super.deploy(vault, overrides || {}) as Promise<MerkleOrchard>;
  }
  getDeployTransaction(
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vault, overrides || {});
  }
  attach(address: string): MerkleOrchard {
    return super.attach(address) as MerkleOrchard;
  }
  connect(signer: Signer): MerkleOrchard__factory {
    return super.connect(signer) as MerkleOrchard__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleOrchardInterface {
    return new utils.Interface(_abi) as MerkleOrchardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleOrchard {
    return new Contract(address, _abi, signerOrProvider) as MerkleOrchard;
  }
}
