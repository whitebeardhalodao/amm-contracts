/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DepositRelayerInterface extends ethers.utils.Interface {
  functions: {
    "multiSidedDeposit(bytes32,address[],uint256[])": FunctionFragment;
    "singleSidedDeposit(bytes32,address,uint256)": FunctionFragment;
    "viewDeposit(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "multiSidedDeposit",
    values: [BytesLike, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "singleSidedDeposit",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewDeposit",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "multiSidedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleSidedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewDeposit",
    data: BytesLike
  ): Result;

  events: {
    "GetBaseNumeraire(uint256)": EventFragment;
    "GetToUint(uint256)": EventFragment;
    "GetWeight(int128)": EventFragment;
    "TestDeposit(uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GetBaseNumeraire"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetToUint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetWeight"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestDeposit"): EventFragment;
}

export type GetBaseNumeraireEvent = TypedEvent<
  [BigNumber] & { baseNumeraire: BigNumber }
>;

export type GetToUintEvent = TypedEvent<[BigNumber] & { result: BigNumber }>;

export type GetWeightEvent = TypedEvent<[BigNumber] & { weight: BigNumber }>;

export type TestDepositEvent = TypedEvent<
  [BigNumber, BigNumber[]] & {
    lpTokens: BigNumber;
    requiredTokens: BigNumber[];
  }
>;

export class DepositRelayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DepositRelayerInterface;

  functions: {
    multiSidedDeposit(
      poolId: BytesLike,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    singleSidedDeposit(
      poolId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewDeposit(
      poolId: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  multiSidedDeposit(
    poolId: BytesLike,
    tokens: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  singleSidedDeposit(
    poolId: BytesLike,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewDeposit(
    poolId: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    multiSidedDeposit(
      poolId: BytesLike,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    singleSidedDeposit(
      poolId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    viewDeposit(
      poolId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;
  };

  filters: {
    "GetBaseNumeraire(uint256)"(
      baseNumeraire?: null
    ): TypedEventFilter<[BigNumber], { baseNumeraire: BigNumber }>;

    GetBaseNumeraire(
      baseNumeraire?: null
    ): TypedEventFilter<[BigNumber], { baseNumeraire: BigNumber }>;

    "GetToUint(uint256)"(
      result?: null
    ): TypedEventFilter<[BigNumber], { result: BigNumber }>;

    GetToUint(
      result?: null
    ): TypedEventFilter<[BigNumber], { result: BigNumber }>;

    "GetWeight(int128)"(
      weight?: null
    ): TypedEventFilter<[BigNumber], { weight: BigNumber }>;

    GetWeight(
      weight?: null
    ): TypedEventFilter<[BigNumber], { weight: BigNumber }>;

    "TestDeposit(uint256,uint256[])"(
      lpTokens?: null,
      requiredTokens?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { lpTokens: BigNumber; requiredTokens: BigNumber[] }
    >;

    TestDeposit(
      lpTokens?: null,
      requiredTokens?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { lpTokens: BigNumber; requiredTokens: BigNumber[] }
    >;
  };

  estimateGas: {
    multiSidedDeposit(
      poolId: BytesLike,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    singleSidedDeposit(
      poolId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewDeposit(
      poolId: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    multiSidedDeposit(
      poolId: BytesLike,
      tokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    singleSidedDeposit(
      poolId: BytesLike,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewDeposit(
      poolId: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
