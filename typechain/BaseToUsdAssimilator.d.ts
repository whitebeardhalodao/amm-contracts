/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BaseToUsdAssimilatorInterface extends ethers.utils.Interface {
  functions: {
    "baseDecimals()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "getRate()": FunctionFragment;
    "intakeNumeraire(uint256)": FunctionFragment;
    "intakeNumeraireLPRatio(uint256,uint256,address,uint256)": FunctionFragment;
    "intakeRaw(uint256)": FunctionFragment;
    "intakeRawAndGetBalance(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "outputNumeraire(address,uint256)": FunctionFragment;
    "outputRaw(address,uint256)": FunctionFragment;
    "outputRawAndGetBalance(address,uint256)": FunctionFragment;
    "usdc()": FunctionFragment;
    "viewNumeraireAmount(uint256)": FunctionFragment;
    "viewNumeraireAmountAndBalance(address,uint256)": FunctionFragment;
    "viewNumeraireBalance(address)": FunctionFragment;
    "viewNumeraireBalanceLPRatio(uint256,uint256,address)": FunctionFragment;
    "viewRawAmount(uint256)": FunctionFragment;
    "viewRawAmountLPRatio(uint256,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "intakeNumeraire",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "intakeNumeraireLPRatio",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "intakeRaw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "intakeRawAndGetBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outputNumeraire",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "outputRaw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "outputRawAndGetBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "viewNumeraireAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewNumeraireAmountAndBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewNumeraireBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewNumeraireBalanceLPRatio",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewRawAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewRawAmountLPRatio",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intakeNumeraire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intakeNumeraireLPRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "intakeRaw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intakeRawAndGetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outputNumeraire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "outputRaw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outputRawAndGetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewNumeraireAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNumeraireAmountAndBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNumeraireBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNumeraireBalanceLPRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewRawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewRawAmountLPRatio",
    data: BytesLike
  ): Result;

  events: {};
}

export class BaseToUsdAssimilator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BaseToUsdAssimilatorInterface;

  functions: {
    baseDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    intakeNumeraire(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intakeNumeraireLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intakeRaw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intakeRawAndGetBalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    outputNumeraire(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    outputRaw(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    outputRawAndGetBalance(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    viewNumeraireAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount_: BigNumber }>;

    viewNumeraireAmountAndBalance(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount_: BigNumber; balance_: BigNumber }
    >;

    viewNumeraireBalance(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance_: BigNumber }>;

    viewNumeraireBalanceLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance_: BigNumber }>;

    viewRawAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount_: BigNumber }>;

    viewRawAmountLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount_: BigNumber }>;
  };

  baseDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  intakeNumeraire(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intakeNumeraireLPRatio(
    _baseWeight: BigNumberish,
    _quoteWeight: BigNumberish,
    _addr: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intakeRaw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intakeRawAndGetBalance(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  outputNumeraire(
    _dst: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  outputRaw(
    _dst: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  outputRawAndGetBalance(
    _dst: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  viewNumeraireAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewNumeraireAmountAndBalance(
    _addr: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount_: BigNumber; balance_: BigNumber }
  >;

  viewNumeraireBalance(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewNumeraireBalanceLPRatio(
    _baseWeight: BigNumberish,
    _quoteWeight: BigNumberish,
    _addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewRawAmount(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewRawAmountLPRatio(
    _baseWeight: BigNumberish,
    _quoteWeight: BigNumberish,
    _addr: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    baseDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    intakeNumeraire(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intakeNumeraireLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intakeRaw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intakeRawAndGetBalance(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount_: BigNumber; balance_: BigNumber }
    >;

    oracle(overrides?: CallOverrides): Promise<string>;

    outputNumeraire(
      _dst: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    outputRaw(
      _dst: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    outputRawAndGetBalance(
      _dst: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount_: BigNumber; balance_: BigNumber }
    >;

    usdc(overrides?: CallOverrides): Promise<string>;

    viewNumeraireAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewNumeraireAmountAndBalance(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount_: BigNumber; balance_: BigNumber }
    >;

    viewNumeraireBalance(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewNumeraireBalanceLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewRawAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewRawAmountLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    baseDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    intakeNumeraire(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intakeNumeraireLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intakeRaw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intakeRawAndGetBalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    outputNumeraire(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    outputRaw(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    outputRawAndGetBalance(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    viewNumeraireAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewNumeraireAmountAndBalance(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewNumeraireBalance(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewNumeraireBalanceLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewRawAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewRawAmountLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    intakeNumeraire(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intakeNumeraireLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intakeRaw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intakeRawAndGetBalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outputNumeraire(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    outputRaw(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    outputRawAndGetBalance(
      _dst: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewNumeraireAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewNumeraireAmountAndBalance(
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewNumeraireBalance(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewNumeraireBalanceLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewRawAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewRawAmountLPRatio(
      _baseWeight: BigNumberish,
      _quoteWeight: BigNumberish,
      _addr: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
