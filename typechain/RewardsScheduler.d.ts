/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RewardsSchedulerInterface extends ethers.utils.Interface {
  functions: {
    "getRewardId(address,address,address,uint256)": FunctionFragment;
    "getScheduledRewardInfo(bytes32)": FunctionFragment;
    "scheduleReward(address,address,uint256,uint256)": FunctionFragment;
    "startRewards(bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRewardId",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledRewardInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleReward",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRewards",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRewardId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRewards",
    data: BytesLike
  ): Result;

  events: {
    "RewardScheduled(bytes32,address,address,address,uint256,uint256)": EventFragment;
    "RewardStarted(bytes32,address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardStarted"): EventFragment;
}

export type RewardScheduledEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    rewardId: string;
    rewarder: string;
    stakingToken: string;
    rewardsToken: string;
    startTime: BigNumber;
    amount: BigNumber;
  }
>;

export type RewardStartedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    rewardId: string;
    rewarder: string;
    stakingToken: string;
    rewardsToken: string;
    startTime: BigNumber;
    amount: BigNumber;
  }
>;

export class RewardsScheduler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardsSchedulerInterface;

  functions: {
    getRewardId(
      stakingToken: string,
      rewardsToken: string,
      rewarder: string,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getScheduledRewardInfo(
      rewardId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, string, BigNumber, number] & {
          stakingToken: string;
          rewardsToken: string;
          startTime: BigNumber;
          rewarder: string;
          amount: BigNumber;
          status: number;
        }
      ] & {
        reward: [string, string, BigNumber, string, BigNumber, number] & {
          stakingToken: string;
          rewardsToken: string;
          startTime: BigNumber;
          rewarder: string;
          amount: BigNumber;
          status: number;
        };
      }
    >;

    scheduleReward(
      stakingToken: string,
      rewardsToken: string,
      amount: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startRewards(
      rewardIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getRewardId(
    stakingToken: string,
    rewardsToken: string,
    rewarder: string,
    startTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getScheduledRewardInfo(
    rewardId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, BigNumber, number] & {
      stakingToken: string;
      rewardsToken: string;
      startTime: BigNumber;
      rewarder: string;
      amount: BigNumber;
      status: number;
    }
  >;

  scheduleReward(
    stakingToken: string,
    rewardsToken: string,
    amount: BigNumberish,
    startTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startRewards(
    rewardIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRewardId(
      stakingToken: string,
      rewardsToken: string,
      rewarder: string,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getScheduledRewardInfo(
      rewardId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, BigNumber, number] & {
        stakingToken: string;
        rewardsToken: string;
        startTime: BigNumber;
        rewarder: string;
        amount: BigNumber;
        status: number;
      }
    >;

    scheduleReward(
      stakingToken: string,
      rewardsToken: string,
      amount: BigNumberish,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    startRewards(
      rewardIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RewardScheduled(bytes32,address,address,address,uint256,uint256)"(
      rewardId?: null,
      rewarder?: string | null,
      stakingToken?: string | null,
      rewardsToken?: string | null,
      startTime?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        rewardId: string;
        rewarder: string;
        stakingToken: string;
        rewardsToken: string;
        startTime: BigNumber;
        amount: BigNumber;
      }
    >;

    RewardScheduled(
      rewardId?: null,
      rewarder?: string | null,
      stakingToken?: string | null,
      rewardsToken?: string | null,
      startTime?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        rewardId: string;
        rewarder: string;
        stakingToken: string;
        rewardsToken: string;
        startTime: BigNumber;
        amount: BigNumber;
      }
    >;

    "RewardStarted(bytes32,address,address,address,uint256,uint256)"(
      rewardId?: null,
      rewarder?: string | null,
      stakingToken?: string | null,
      rewardsToken?: string | null,
      startTime?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        rewardId: string;
        rewarder: string;
        stakingToken: string;
        rewardsToken: string;
        startTime: BigNumber;
        amount: BigNumber;
      }
    >;

    RewardStarted(
      rewardId?: null,
      rewarder?: string | null,
      stakingToken?: string | null,
      rewardsToken?: string | null,
      startTime?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        rewardId: string;
        rewarder: string;
        stakingToken: string;
        rewardsToken: string;
        startTime: BigNumber;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    getRewardId(
      stakingToken: string,
      rewardsToken: string,
      rewarder: string,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScheduledRewardInfo(
      rewardId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scheduleReward(
      stakingToken: string,
      rewardsToken: string,
      amount: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startRewards(
      rewardIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRewardId(
      stakingToken: string,
      rewardsToken: string,
      rewarder: string,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScheduledRewardInfo(
      rewardId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scheduleReward(
      stakingToken: string,
      rewardsToken: string,
      amount: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startRewards(
      rewardIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
