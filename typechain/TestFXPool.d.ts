/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestFXPoolInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "alpha()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assets(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "beta()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delta()": FunctionFragment;
    "derivatives(uint256)": FunctionFragment;
    "emergency()": FunctionFragment;
    "epsilon()": FunctionFragment;
    "frozen()": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getAsset(uint256)": FunctionFragment;
    "getAssets()": FunctionFragment;
    "getAssetsLength()": FunctionFragment;
    "getAssimilator(address)": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPausedState()": FunctionFragment;
    "getPoolId()": FunctionFragment;
    "getScalingFactors()": FunctionFragment;
    "getSwapFeePercentage()": FunctionFragment;
    "getVault()": FunctionFragment;
    "getWeight(uint256)": FunctionFragment;
    "getWeights()": FunctionFragment;
    "getWeightsLength()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lambda()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numeraires(uint256)": FunctionFragment;
    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)": FunctionFragment;
    "onInitalizePool(bytes32,address,address,uint256[],bytes)": FunctionFragment;
    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)": FunctionFragment;
    "onSwapGivenIn((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)": FunctionFragment;
    "onSwapGivenOut((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "reserves(uint256)": FunctionFragment;
    "setAssetManagerPoolConfig(address,bytes)": FunctionFragment;
    "setAssimilator(address,(address,uint8))": FunctionFragment;
    "setParams(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setSwapFeePercentage(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "weights(uint256)": FunctionFragment;
    "whitelistingStage()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "alpha", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "beta", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "derivatives",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "emergency", values?: undefined): string;
  encodeFunctionData(functionFragment: "epsilon", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssimilator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPausedState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getScalingFactors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWeightsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lambda", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numeraires",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onExitPool",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onInitalizePool",
    values: [BytesLike, string, string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onJoinPool",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwap",
    values: [
      {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwapGivenIn",
    values: [
      {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwapGivenOut",
    values: [
      {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "oracles", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryExit",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryJoin",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetManagerPoolConfig",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssimilator",
    values: [string, { addr: string; ix: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setSwapFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistingStage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "alpha", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "derivatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emergency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epsilon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssimilator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPausedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWeight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWeights", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWeightsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lambda", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numeraires", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onExitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onInitalizePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onJoinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onSwapGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSwapGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryExit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetManagerPoolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssimilator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistingStage",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AssetIncluded(address,address,uint256)": EventFragment;
    "AssimilatorIncluded(address,address,address,address)": EventFragment;
    "ParametersSet(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "PausedStateChanged(bool)": EventFragment;
    "SwapFeePercentageChanged(uint256)": EventFragment;
    "TestExitPool(uint256,uint256[],uint256[])": EventFragment;
    "TestInitializePool(uint256,uint256[])": EventFragment;
    "TestJoinPool(uint256,uint256[],uint256[])": EventFragment;
    "TestSwapGivenIn(bytes32,address,address,uint256,address,address,uint256,uint256)": EventFragment;
    "TestSwapGivenOut(bytes32,address,address,uint256,address,address,uint256,uint256)": EventFragment;
    "TestingSwapGivenIn(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIncluded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssimilatorIncluded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFeePercentageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestExitPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestInitializePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestJoinPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestSwapGivenIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestSwapGivenOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TestingSwapGivenIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type AssetIncludedEvent = TypedEvent<
  [string, string, BigNumber] & {
    numeraire: string;
    reserve: string;
    weight: BigNumber;
  }
>;

export type AssimilatorIncludedEvent = TypedEvent<
  [string, string, string, string] & {
    derivative: string;
    numeraire: string;
    reserve: string;
    assimilator: string;
  }
>;

export type ParametersSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    alpha: BigNumber;
    beta: BigNumber;
    delta: BigNumber;
    epsilon: BigNumber;
    lambda: BigNumber;
  }
>;

export type PausedStateChangedEvent = TypedEvent<
  [boolean] & { paused: boolean }
>;

export type SwapFeePercentageChangedEvent = TypedEvent<
  [BigNumber] & { swapFeePercentage: BigNumber }
>;

export type TestExitPoolEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]] & {
    bptAmountIn: BigNumber;
    amountsOut: BigNumber[];
    dueProtocolFeeAmounts: BigNumber[];
  }
>;

export type TestInitializePoolEvent = TypedEvent<
  [BigNumber, BigNumber[]] & { bptAmountOut: BigNumber; amountsIn: BigNumber[] }
>;

export type TestJoinPoolEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]] & {
    bptAmountOut: BigNumber;
    amountsIn: BigNumber[];
    dueProtocolFeeAmounts: BigNumber[];
  }
>;

export type TestSwapGivenInEvent = TypedEvent<
  [string, string, string, BigNumber, string, string, BigNumber, BigNumber] & {
    poolId: string;
    tokenIn: string;
    tokenOut: string;
    amount: BigNumber;
    from: string;
    to: string;
    balanceTokenIn: BigNumber;
    balanceTokenOut: BigNumber;
  }
>;

export type TestSwapGivenOutEvent = TypedEvent<
  [string, string, string, BigNumber, string, string, BigNumber, BigNumber] & {
    poolId: string;
    tokenIn: string;
    tokenOut: string;
    amount: BigNumber;
    from: string;
    to: string;
    balanceTokenIn: BigNumber;
    balanceTokenOut: BigNumber;
  }
>;

export type TestingSwapGivenInEvent = TypedEvent<
  [BigNumber] & { calculatedAmount: BigNumber }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class TestFXPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestFXPoolInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    alpha(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { addr: string; ix: number }>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    beta(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delta(overrides?: CallOverrides): Promise<[BigNumber]>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    emergency(overrides?: CallOverrides): Promise<[boolean]>;

    epsilon(overrides?: CallOverrides): Promise<[BigNumber]>;

    frozen(overrides?: CallOverrides): Promise<[boolean]>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAsset(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, number] & { addr: string; ix: number }]>;

    getAssets(
      overrides?: CallOverrides
    ): Promise<[([string, number] & { addr: string; ix: number })[]]>;

    getAssetsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssimilator(
      assim: string,
      overrides?: CallOverrides
    ): Promise<[[string, number] & { addr: string; ix: number }]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPausedState(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<[string]>;

    getScalingFactors(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    getWeight(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWeights(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getWeightsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lambda(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numeraires(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onInitalizePool(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onSwap(
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onSwapGivenIn(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onSwapGivenOut(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setAssetManagerPoolConfig(
      token: string,
      poolConfig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAssimilator(
      assimAddress: string,
      assimilator: { addr: string; ix: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFeePercentage(
      swapFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistingStage(overrides?: CallOverrides): Promise<[boolean]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  alpha(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { addr: string; ix: number }>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  beta(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delta(overrides?: CallOverrides): Promise<BigNumber>;

  derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  emergency(overrides?: CallOverrides): Promise<boolean>;

  epsilon(overrides?: CallOverrides): Promise<BigNumber>;

  frozen(overrides?: CallOverrides): Promise<boolean>;

  getActionId(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAsset(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { addr: string; ix: number }>;

  getAssets(
    overrides?: CallOverrides
  ): Promise<([string, number] & { addr: string; ix: number })[]>;

  getAssetsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getAssimilator(
    assim: string,
    overrides?: CallOverrides
  ): Promise<[string, number] & { addr: string; ix: number }>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPausedState(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      paused: boolean;
      pauseWindowEndTime: BigNumber;
      bufferPeriodEndTime: BigNumber;
    }
  >;

  getPoolId(overrides?: CallOverrides): Promise<string>;

  getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  getWeight(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

  getWeightsLength(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lambda(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "onExitPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    balances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolSwapFeePercentage: BigNumberish,
    scalingFactors: BigNumberish[],
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    balances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolSwapFeePercentage: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onInitalizePool(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    scalingFactors: BigNumberish[],
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    balances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolSwapFeePercentage: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    balances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolSwapFeePercentage: BigNumberish,
    scalingFactors: BigNumberish[],
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onSwap(
    request: {
      kind: BigNumberish;
      tokenIn: string;
      tokenOut: string;
      amount: BigNumberish;
      poolId: BytesLike;
      lastChangeBlock: BigNumberish;
      from: string;
      to: string;
      userData: BytesLike;
    },
    balanceTokenIn: BigNumberish,
    balanceTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onSwapGivenIn(
    swapRequest: {
      kind: BigNumberish;
      tokenIn: string;
      tokenOut: string;
      amount: BigNumberish;
      poolId: BytesLike;
      lastChangeBlock: BigNumberish;
      from: string;
      to: string;
      userData: BytesLike;
    },
    balanceTokenIn: BigNumberish,
    balanceTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onSwapGivenOut(
    swapRequest: {
      kind: BigNumberish;
      tokenIn: string;
      tokenOut: string;
      amount: BigNumberish;
      poolId: BytesLike;
      lastChangeBlock: BigNumberish;
      from: string;
      to: string;
      userData: BytesLike;
    },
    balanceTokenIn: BigNumberish,
    balanceTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queryExit(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    balances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolSwapFeePercentage: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queryJoin(
    poolId: BytesLike,
    sender: string,
    recipient: string,
    balances: BigNumberish[],
    lastChangeBlock: BigNumberish,
    protocolSwapFeePercentage: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setAssetManagerPoolConfig(
    token: string,
    poolConfig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAssimilator(
    assimAddress: string,
    assimilator: { addr: string; ix: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParams(
    _alpha: BigNumberish,
    _beta: BigNumberish,
    _feeAtHalt: BigNumberish,
    _epsilon: BigNumberish,
    _lambda: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFeePercentage(
    swapFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weights(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  whitelistingStage(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    alpha(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { addr: string; ix: number }>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    beta(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delta(overrides?: CallOverrides): Promise<BigNumber>;

    derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    emergency(overrides?: CallOverrides): Promise<boolean>;

    epsilon(overrides?: CallOverrides): Promise<BigNumber>;

    frozen(overrides?: CallOverrides): Promise<boolean>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAsset(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { addr: string; ix: number }>;

    getAssets(
      overrides?: CallOverrides
    ): Promise<([string, number] & { addr: string; ix: number })[]>;

    getAssetsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAssimilator(
      assim: string,
      overrides?: CallOverrides
    ): Promise<[string, number] & { addr: string; ix: number }>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPausedState(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<string>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    getWeight(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

    getWeightsLength(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lambda(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
        dueProtocolFeeAmounts: BigNumber[];
      }
    >;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    onInitalizePool(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
      }
    >;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
        dueProtocolFeeAmounts: BigNumber[];
      }
    >;

    onSwap(
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSwapGivenIn(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSwapGivenOut(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { bptIn: BigNumber; amountsOut: BigNumber[] }
    >;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { bptOut: BigNumber; amountsIn: BigNumber[] }
    >;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setAssetManagerPoolConfig(
      token: string,
      poolConfig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssimilator(
      assimAddress: string,
      assimilator: { addr: string; ix: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(paused: boolean, overrides?: CallOverrides): Promise<void>;

    setSwapFeePercentage(
      swapFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    weights(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistingStage(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "AssetIncluded(address,address,uint256)"(
      numeraire?: string | null,
      reserve?: string | null,
      weight?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { numeraire: string; reserve: string; weight: BigNumber }
    >;

    AssetIncluded(
      numeraire?: string | null,
      reserve?: string | null,
      weight?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { numeraire: string; reserve: string; weight: BigNumber }
    >;

    "AssimilatorIncluded(address,address,address,address)"(
      derivative?: string | null,
      numeraire?: string | null,
      reserve?: string | null,
      assimilator?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        derivative: string;
        numeraire: string;
        reserve: string;
        assimilator: string;
      }
    >;

    AssimilatorIncluded(
      derivative?: string | null,
      numeraire?: string | null,
      reserve?: string | null,
      assimilator?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        derivative: string;
        numeraire: string;
        reserve: string;
        assimilator: string;
      }
    >;

    "ParametersSet(uint256,uint256,uint256,uint256,uint256)"(
      alpha?: null,
      beta?: null,
      delta?: null,
      epsilon?: null,
      lambda?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
      }
    >;

    ParametersSet(
      alpha?: null,
      beta?: null,
      delta?: null,
      epsilon?: null,
      lambda?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
      }
    >;

    "PausedStateChanged(bool)"(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    PausedStateChanged(
      paused?: null
    ): TypedEventFilter<[boolean], { paused: boolean }>;

    "SwapFeePercentageChanged(uint256)"(
      swapFeePercentage?: null
    ): TypedEventFilter<[BigNumber], { swapFeePercentage: BigNumber }>;

    SwapFeePercentageChanged(
      swapFeePercentage?: null
    ): TypedEventFilter<[BigNumber], { swapFeePercentage: BigNumber }>;

    "TestExitPool(uint256,uint256[],uint256[])"(
      bptAmountIn?: null,
      amountsOut?: null,
      dueProtocolFeeAmounts?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
        dueProtocolFeeAmounts: BigNumber[];
      }
    >;

    TestExitPool(
      bptAmountIn?: null,
      amountsOut?: null,
      dueProtocolFeeAmounts?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      {
        bptAmountIn: BigNumber;
        amountsOut: BigNumber[];
        dueProtocolFeeAmounts: BigNumber[];
      }
    >;

    "TestInitializePool(uint256,uint256[])"(
      bptAmountOut?: null,
      amountsIn?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { bptAmountOut: BigNumber; amountsIn: BigNumber[] }
    >;

    TestInitializePool(
      bptAmountOut?: null,
      amountsIn?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { bptAmountOut: BigNumber; amountsIn: BigNumber[] }
    >;

    "TestJoinPool(uint256,uint256[],uint256[])"(
      bptAmountOut?: null,
      amountsIn?: null,
      dueProtocolFeeAmounts?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
        dueProtocolFeeAmounts: BigNumber[];
      }
    >;

    TestJoinPool(
      bptAmountOut?: null,
      amountsIn?: null,
      dueProtocolFeeAmounts?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[], BigNumber[]],
      {
        bptAmountOut: BigNumber;
        amountsIn: BigNumber[];
        dueProtocolFeeAmounts: BigNumber[];
      }
    >;

    "TestSwapGivenIn(bytes32,address,address,uint256,address,address,uint256,uint256)"(
      poolId?: null,
      tokenIn?: null,
      tokenOut?: null,
      amount?: null,
      from?: null,
      to?: null,
      balanceTokenIn?: null,
      balanceTokenOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, BigNumber, BigNumber],
      {
        poolId: string;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumber;
        from: string;
        to: string;
        balanceTokenIn: BigNumber;
        balanceTokenOut: BigNumber;
      }
    >;

    TestSwapGivenIn(
      poolId?: null,
      tokenIn?: null,
      tokenOut?: null,
      amount?: null,
      from?: null,
      to?: null,
      balanceTokenIn?: null,
      balanceTokenOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, BigNumber, BigNumber],
      {
        poolId: string;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumber;
        from: string;
        to: string;
        balanceTokenIn: BigNumber;
        balanceTokenOut: BigNumber;
      }
    >;

    "TestSwapGivenOut(bytes32,address,address,uint256,address,address,uint256,uint256)"(
      poolId?: null,
      tokenIn?: null,
      tokenOut?: null,
      amount?: null,
      from?: null,
      to?: null,
      balanceTokenIn?: null,
      balanceTokenOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, BigNumber, BigNumber],
      {
        poolId: string;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumber;
        from: string;
        to: string;
        balanceTokenIn: BigNumber;
        balanceTokenOut: BigNumber;
      }
    >;

    TestSwapGivenOut(
      poolId?: null,
      tokenIn?: null,
      tokenOut?: null,
      amount?: null,
      from?: null,
      to?: null,
      balanceTokenIn?: null,
      balanceTokenOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, string, string, BigNumber, BigNumber],
      {
        poolId: string;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumber;
        from: string;
        to: string;
        balanceTokenIn: BigNumber;
        balanceTokenOut: BigNumber;
      }
    >;

    "TestingSwapGivenIn(uint256)"(
      calculatedAmount?: null
    ): TypedEventFilter<[BigNumber], { calculatedAmount: BigNumber }>;

    TestingSwapGivenIn(
      calculatedAmount?: null
    ): TypedEventFilter<[BigNumber], { calculatedAmount: BigNumber }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    alpha(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    beta(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delta(overrides?: CallOverrides): Promise<BigNumber>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergency(overrides?: CallOverrides): Promise<BigNumber>;

    epsilon(overrides?: CallOverrides): Promise<BigNumber>;

    frozen(overrides?: CallOverrides): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAsset(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAssimilator(
      assim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPausedState(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    getWeight(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeights(overrides?: CallOverrides): Promise<BigNumber>;

    getWeightsLength(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lambda(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    numeraires(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onInitalizePool(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onSwap(
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onSwapGivenIn(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onSwapGivenOut(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAssetManagerPoolConfig(
      token: string,
      poolConfig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAssimilator(
      assimAddress: string,
      assimilator: { addr: string; ix: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFeePercentage(
      swapFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weights(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistingStage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    derivatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epsilon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAsset(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssimilator(
      assim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPausedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScalingFactors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWeight(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWeightsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lambda(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numeraires(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onInitalizePool(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,uint256[],bytes)"(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      scalingFactors: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onSwap(
      request: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onSwapGivenIn(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onSwapGivenOut(
      swapRequest: {
        kind: BigNumberish;
        tokenIn: string;
        tokenOut: string;
        amount: BigNumberish;
        poolId: BytesLike;
        lastChangeBlock: BigNumberish;
        from: string;
        to: string;
        userData: BytesLike;
      },
      balanceTokenIn: BigNumberish,
      balanceTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queryExit(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queryJoin(
      poolId: BytesLike,
      sender: string,
      recipient: string,
      balances: BigNumberish[],
      lastChangeBlock: BigNumberish,
      protocolSwapFeePercentage: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAssetManagerPoolConfig(
      token: string,
      poolConfig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAssimilator(
      assimAddress: string,
      assimilator: { addr: string; ix: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFeePercentage(
      swapFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weights(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistingStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
