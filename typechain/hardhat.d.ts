/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Assimilators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Assimilators__factory>;
    getContractFactory(
      name: "BaseToUsdAssimilator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseToUsdAssimilator__factory>;
    getContractFactory(
      name: "CurveMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveMath__factory>;
    getContractFactory(
      name: "IAssimilator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAssimilator__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "ProportionalLiquidity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProportionalLiquidity__factory>;
    getContractFactory(
      name: "AmmV1Swaps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AmmV1Swaps__factory>;
    getContractFactory(
      name: "UsdcToUsdAssimilator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UsdcToUsdAssimilator__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IStakedAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedAave__factory>;
    getContractFactory(
      name: "IAssetManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAssetManager__factory>;
    getContractFactory(
      name: "RebalancingRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RebalancingRelayer__factory>;
    getContractFactory(
      name: "RewardsAssetManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsAssetManager__factory>;
    getContractFactory(
      name: "BalancerPoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerPoolToken__factory>;
    getContractFactory(
      name: "BaseGeneralPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseGeneralPool__factory>;
    getContractFactory(
      name: "BaseMinimalSwapInfoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseMinimalSwapInfoPool__factory>;
    getContractFactory(
      name: "BasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePool__factory>;
    getContractFactory(
      name: "BasePoolAuthorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolAuthorization__factory>;
    getContractFactory(
      name: "BasePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolFactory__factory>;
    getContractFactory(
      name: "BasePoolSplitCodeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePoolSplitCodeFactory__factory>;
    getContractFactory(
      name: "FactoryWidePauseWindow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryWidePauseWindow__factory>;
    getContractFactory(
      name: "IBasePoolRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePoolRelayer__factory>;
    getContractFactory(
      name: "IPoolPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolPriceOracle__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IRateProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRateProvider__factory>;
    getContractFactory(
      name: "IRelayedBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayedBasePool__factory>;
    getContractFactory(
      name: "PoolPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolPriceOracle__factory>;
    getContractFactory(
      name: "RelayedBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayedBasePool__factory>;
    getContractFactory(
      name: "MockBalancerPoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBalancerPoolToken__factory>;
    getContractFactory(
      name: "MockBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBasePool__factory>;
    getContractFactory(
      name: "MockBasePoolRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBasePoolRelayer__factory>;
    getContractFactory(
      name: "MockPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPoolFactory__factory>;
    getContractFactory(
      name: "MockPoolSplitCodeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPoolSplitCodeFactory__factory>;
    getContractFactory(
      name: "MockRateProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRateProvider__factory>;
    getContractFactory(
      name: "MockRelayedBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRelayedBasePool__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;
    getContractFactory(
      name: "MockPoolPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPoolPriceOracle__factory>;
    getContractFactory(
      name: "MockSamples",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSamples__factory>;
    getContractFactory(
      name: "Authentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authentication__factory>;
    getContractFactory(
      name: "BaseSplitCodeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseSplitCodeFactory__factory>;
    getContractFactory(
      name: "IAuthentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthentication__factory>;
    getContractFactory(
      name: "ISignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignaturesValidator__factory>;
    getContractFactory(
      name: "ITemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITemporarilyPausable__factory>;
    getContractFactory(
      name: "SignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignaturesValidator__factory>;
    getContractFactory(
      name: "TemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TemporarilyPausable__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20PermitDAI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitDAI__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BalancerErrorsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerErrorsMock__factory>;
    getContractFactory(
      name: "CodeDeployerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CodeDeployerFactory__factory>;
    getContractFactory(
      name: "EnumerableIERC20ToBytes32MapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnumerableIERC20ToBytes32MapMock__factory>;
    getContractFactory(
      name: "EnumerableIERC20ToUint256MapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnumerableIERC20ToUint256MapMock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "ERC20PermitMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitMock__factory>;
    getContractFactory(
      name: "LogExpMathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LogExpMathMock__factory>;
    getContractFactory(
      name: "MockLogCompression",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLogCompression__factory>;
    getContractFactory(
      name: "MockFactoryCreatedContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFactoryCreatedContract__factory>;
    getContractFactory(
      name: "MockSplitCodeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSplitCodeFactory__factory>;
    getContractFactory(
      name: "ReentrancyAttack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyAttack__factory>;
    getContractFactory(
      name: "ReentrancyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyMock__factory>;
    getContractFactory(
      name: "SignaturesValidatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignaturesValidatorMock__factory>;
    getContractFactory(
      name: "TemporarilyPausableMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TemporarilyPausableMock__factory>;
    getContractFactory(
      name: "AssetManagers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetManagers__factory>;
    getContractFactory(
      name: "AssetTransfersHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetTransfersHandler__factory>;
    getContractFactory(
      name: "Authorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorizer__factory>;
    getContractFactory(
      name: "MinimalSwapInfoPoolsBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalSwapInfoPoolsBalance__factory>;
    getContractFactory(
      name: "TwoTokenPoolsBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TwoTokenPoolsBalance__factory>;
    getContractFactory(
      name: "Fees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Fees__factory>;
    getContractFactory(
      name: "FlashLoans",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoans__factory>;
    getContractFactory(
      name: "IAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizer__factory>;
    getContractFactory(
      name: "IBasePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePool__factory>;
    getContractFactory(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: "IGeneralPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGeneralPool__factory>;
    getContractFactory(
      name: "IMinimalSwapInfoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinimalSwapInfoPool__factory>;
    getContractFactory(
      name: "IProtocolFeesCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeesCollector__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "PoolBalances",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolBalances__factory>;
    getContractFactory(
      name: "PoolRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolRegistry__factory>;
    getContractFactory(
      name: "PoolTokens",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolTokens__factory>;
    getContractFactory(
      name: "ProtocolFeesCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolFeesCollector__factory>;
    getContractFactory(
      name: "Swaps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Swaps__factory>;
    getContractFactory(
      name: "UserBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserBalance__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "VaultAuthorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAuthorization__factory>;
    getContractFactory(
      name: "FakeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeToken__factory>;
    getContractFactory(
      name: "DepositRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositRelayer__factory>;
    getContractFactory(
      name: "FXPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FXPool__factory>;
    getContractFactory(
      name: "IERC20Decimals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Decimals__factory>;
    getContractFactory(
      name: "TestFXPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestFXPool__factory>;
    getContractFactory(
      name: "TestNumberConvert",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNumberConvert__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Assimilators",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Assimilators>;
    getContractAt(
      name: "BaseToUsdAssimilator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseToUsdAssimilator>;
    getContractAt(
      name: "CurveMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveMath>;
    getContractAt(
      name: "IAssimilator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAssimilator>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "ProportionalLiquidity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProportionalLiquidity>;
    getContractAt(
      name: "AmmV1Swaps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AmmV1Swaps>;
    getContractAt(
      name: "UsdcToUsdAssimilator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UsdcToUsdAssimilator>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(
      name: "ILendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "ILendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProvider>;
    getContractAt(
      name: "IStakedAave",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedAave>;
    getContractAt(
      name: "IAssetManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAssetManager>;
    getContractAt(
      name: "RebalancingRelayer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RebalancingRelayer>;
    getContractAt(
      name: "RewardsAssetManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsAssetManager>;
    getContractAt(
      name: "BalancerPoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerPoolToken>;
    getContractAt(
      name: "BaseGeneralPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseGeneralPool>;
    getContractAt(
      name: "BaseMinimalSwapInfoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseMinimalSwapInfoPool>;
    getContractAt(
      name: "BasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePool>;
    getContractAt(
      name: "BasePoolAuthorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolAuthorization>;
    getContractAt(
      name: "BasePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolFactory>;
    getContractAt(
      name: "BasePoolSplitCodeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePoolSplitCodeFactory>;
    getContractAt(
      name: "FactoryWidePauseWindow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryWidePauseWindow>;
    getContractAt(
      name: "IBasePoolRelayer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePoolRelayer>;
    getContractAt(
      name: "IPoolPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolPriceOracle>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IRateProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRateProvider>;
    getContractAt(
      name: "IRelayedBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayedBasePool>;
    getContractAt(
      name: "PoolPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolPriceOracle>;
    getContractAt(
      name: "RelayedBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayedBasePool>;
    getContractAt(
      name: "MockBalancerPoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBalancerPoolToken>;
    getContractAt(
      name: "MockBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBasePool>;
    getContractAt(
      name: "MockBasePoolRelayer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBasePoolRelayer>;
    getContractAt(
      name: "MockPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPoolFactory>;
    getContractAt(
      name: "MockPoolSplitCodeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPoolSplitCodeFactory>;
    getContractAt(
      name: "MockRateProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRateProvider>;
    getContractAt(
      name: "MockRelayedBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRelayedBasePool>;
    getContractAt(
      name: "MockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVault>;
    getContractAt(
      name: "MockPoolPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPoolPriceOracle>;
    getContractAt(
      name: "MockSamples",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSamples>;
    getContractAt(
      name: "Authentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authentication>;
    getContractAt(
      name: "BaseSplitCodeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseSplitCodeFactory>;
    getContractAt(
      name: "IAuthentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthentication>;
    getContractAt(
      name: "ISignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignaturesValidator>;
    getContractAt(
      name: "ITemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITemporarilyPausable>;
    getContractAt(
      name: "SignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignaturesValidator>;
    getContractAt(
      name: "TemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TemporarilyPausable>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20PermitDAI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitDAI>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "BalancerErrorsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerErrorsMock>;
    getContractAt(
      name: "CodeDeployerFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CodeDeployerFactory>;
    getContractAt(
      name: "EnumerableIERC20ToBytes32MapMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnumerableIERC20ToBytes32MapMock>;
    getContractAt(
      name: "EnumerableIERC20ToUint256MapMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnumerableIERC20ToUint256MapMock>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "ERC20PermitMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitMock>;
    getContractAt(
      name: "LogExpMathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LogExpMathMock>;
    getContractAt(
      name: "MockLogCompression",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLogCompression>;
    getContractAt(
      name: "MockFactoryCreatedContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFactoryCreatedContract>;
    getContractAt(
      name: "MockSplitCodeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSplitCodeFactory>;
    getContractAt(
      name: "ReentrancyAttack",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyAttack>;
    getContractAt(
      name: "ReentrancyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyMock>;
    getContractAt(
      name: "SignaturesValidatorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignaturesValidatorMock>;
    getContractAt(
      name: "TemporarilyPausableMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TemporarilyPausableMock>;
    getContractAt(
      name: "AssetManagers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetManagers>;
    getContractAt(
      name: "AssetTransfersHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetTransfersHandler>;
    getContractAt(
      name: "Authorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorizer>;
    getContractAt(
      name: "MinimalSwapInfoPoolsBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalSwapInfoPoolsBalance>;
    getContractAt(
      name: "TwoTokenPoolsBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TwoTokenPoolsBalance>;
    getContractAt(
      name: "Fees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Fees>;
    getContractAt(
      name: "FlashLoans",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoans>;
    getContractAt(
      name: "IAuthorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizer>;
    getContractAt(
      name: "IBasePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePool>;
    getContractAt(
      name: "IFlashLoanRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: "IGeneralPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGeneralPool>;
    getContractAt(
      name: "IMinimalSwapInfoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinimalSwapInfoPool>;
    getContractAt(
      name: "IProtocolFeesCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeesCollector>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "PoolBalances",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolBalances>;
    getContractAt(
      name: "PoolRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolRegistry>;
    getContractAt(
      name: "PoolTokens",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolTokens>;
    getContractAt(
      name: "ProtocolFeesCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolFeesCollector>;
    getContractAt(
      name: "Swaps",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Swaps>;
    getContractAt(
      name: "UserBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserBalance>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "VaultAuthorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultAuthorization>;
    getContractAt(
      name: "FakeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeToken>;
    getContractAt(
      name: "DepositRelayer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositRelayer>;
    getContractAt(
      name: "FXPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FXPool>;
    getContractAt(
      name: "IERC20Decimals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Decimals>;
    getContractAt(
      name: "TestFXPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestFXPool>;
    getContractAt(
      name: "TestNumberConvert",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNumberConvert>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
