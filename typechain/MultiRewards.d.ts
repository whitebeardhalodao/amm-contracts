/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MultiRewardsInterface extends ethers.utils.Interface {
  functions: {
    "addReward(address,address,uint256)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "exit(address[])": FunctionFragment;
    "exitWithCallback(address[],address,bytes)": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getReward(address[])": FunctionFragment;
    "getRewardAsInternalBalance(address[])": FunctionFragment;
    "getRewardWithCallback(address[],address,bytes)": FunctionFragment;
    "getVault()": FunctionFragment;
    "isAssetManager(address,address)": FunctionFragment;
    "isWhitelistedRewarder(address,address,address)": FunctionFragment;
    "lastTimeRewardApplicable(address,address,address)": FunctionFragment;
    "notifyRewardAmount(address,address,address,uint256)": FunctionFragment;
    "rewardPerToken(address,address,address)": FunctionFragment;
    "rewardsScheduler()": FunctionFragment;
    "setRewardsDuration(address,address,uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stakeFor(address,uint256,address)": FunctionFragment;
    "stakeWithPermit(address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "totalEarned(address,address,address)": FunctionFragment;
    "totalSupply(address)": FunctionFragment;
    "unaccountedForUnpaidRewards(address,address,address,address)": FunctionFragment;
    "unstake(address,uint256,address)": FunctionFragment;
    "whitelistRewarder(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "exitWithCallback",
    values: [string[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "getRewardAsInternalBalance",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardWithCallback",
    values: [string[], string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAssetManager",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedRewarder",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsScheduler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDuration",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithPermit",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEarned",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "totalSupply", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unaccountedForUnpaidRewards",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRewarder",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAsInternalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsScheduler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unaccountedForUnpaidRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRewarder",
    data: BytesLike
  ): Result;

  events: {
    "RewardAdded(address,address,address,uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "RewarderWhitelisted(address,address,address)": EventFragment;
    "RewardsDurationUpdated(address,address,address,uint256)": EventFragment;
    "Staked(address,address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewarderWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type RewardAddedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    stakingToken: string;
    rewardsToken: string;
    rewarder: string;
    amount: BigNumber;
  }
>;

export type RewardPaidEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    rewardToken: string;
    amount: BigNumber;
  }
>;

export type RewarderWhitelistedEvent = TypedEvent<
  [string, string, string] & {
    stakingToken: string;
    rewardsToken: string;
    rewarder: string;
  }
>;

export type RewardsDurationUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    stakingToken: string;
    rewardsToken: string;
    rewarder: string;
    newDuration: BigNumber;
  }
>;

export type StakedEvent = TypedEvent<
  [string, string, BigNumber] & {
    stakingToken: string;
    account: string;
    amount: BigNumber;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber] & {
    stakingToken: string;
    account: string;
    amount: BigNumber;
  }
>;

export class MultiRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiRewardsInterface;

  functions: {
    addReward(
      _stakingToken: string,
      _rewardsToken: string,
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _stakingToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getReward(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardAsInternalBalance(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    isAssetManager(
      stakingToken: string,
      rewarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastTimeRewardApplicable(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    notifyRewardAmount(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsScheduler(overrides?: CallOverrides): Promise<[string]>;

    setRewardsDuration(
      _stakingToken: string,
      _rewardsToken: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeWithPermit(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalEarned(
      _stakingToken: string,
      _rewardsToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    totalSupply(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unaccountedForUnpaidRewards(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(
      _stakingToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addReward(
    _stakingToken: string,
    _rewardsToken: string,
    _rewardsDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _stakingToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exit(
    _stakingTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitWithCallback(
    _stakingTokens: string[],
    _callbackContract: string,
    _callbackData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActionId(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getReward(
    _stakingTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardAsInternalBalance(
    _stakingTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardWithCallback(
    _stakingTokens: string[],
    _callbackContract: string,
    _callbackData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVault(overrides?: CallOverrides): Promise<string>;

  isAssetManager(
    stakingToken: string,
    rewarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedRewarder(
    _stakingToken: string,
    _rewardsToken: string,
    _rewarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastTimeRewardApplicable(
    _stakingToken: string,
    _rewardsToken: string,
    _rewarder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  notifyRewardAmount(
    _stakingToken: string,
    _rewardsToken: string,
    _rewarder: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(
    _stakingToken: string,
    _rewardsToken: string,
    _rewarder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsScheduler(overrides?: CallOverrides): Promise<string>;

  setRewardsDuration(
    _stakingToken: string,
    _rewardsToken: string,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _stakingToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    _stakingToken: string,
    _amount: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeWithPermit(
    _stakingToken: string,
    _amount: BigNumberish,
    _user: string,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalEarned(
    _stakingToken: string,
    _rewardsToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(
    _stakingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unaccountedForUnpaidRewards(
    _stakingToken: string,
    _rewardsToken: string,
    _rewarder: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    _stakingToken: string,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistRewarder(
    _stakingToken: string,
    _rewardsToken: string,
    _rewarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReward(
      _stakingToken: string,
      _rewardsToken: string,
      _rewardsDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      _stakingToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(_stakingTokens: string[], overrides?: CallOverrides): Promise<void>;

    exitWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getReward(
      _stakingTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardAsInternalBalance(
      _stakingTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getVault(overrides?: CallOverrides): Promise<string>;

    isAssetManager(
      stakingToken: string,
      rewarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTimeRewardApplicable(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyRewardAmount(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerToken(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsScheduler(overrides?: CallOverrides): Promise<string>;

    setRewardsDuration(
      _stakingToken: string,
      _rewardsToken: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFor(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeWithPermit(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalEarned(
      _stakingToken: string,
      _rewardsToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unaccountedForUnpaidRewards(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      _stakingToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RewardAdded(address,address,address,uint256)"(
      stakingToken?: string | null,
      rewardsToken?: string | null,
      rewarder?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        stakingToken: string;
        rewardsToken: string;
        rewarder: string;
        amount: BigNumber;
      }
    >;

    RewardAdded(
      stakingToken?: string | null,
      rewardsToken?: string | null,
      rewarder?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        stakingToken: string;
        rewardsToken: string;
        rewarder: string;
        amount: BigNumber;
      }
    >;

    "RewardPaid(address,address,uint256)"(
      user?: string | null,
      rewardToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; rewardToken: string; amount: BigNumber }
    >;

    RewardPaid(
      user?: string | null,
      rewardToken?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; rewardToken: string; amount: BigNumber }
    >;

    "RewarderWhitelisted(address,address,address)"(
      stakingToken?: string | null,
      rewardsToken?: string | null,
      rewarder?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { stakingToken: string; rewardsToken: string; rewarder: string }
    >;

    RewarderWhitelisted(
      stakingToken?: string | null,
      rewardsToken?: string | null,
      rewarder?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { stakingToken: string; rewardsToken: string; rewarder: string }
    >;

    "RewardsDurationUpdated(address,address,address,uint256)"(
      stakingToken?: string | null,
      rewardsToken?: string | null,
      rewarder?: string | null,
      newDuration?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        stakingToken: string;
        rewardsToken: string;
        rewarder: string;
        newDuration: BigNumber;
      }
    >;

    RewardsDurationUpdated(
      stakingToken?: string | null,
      rewardsToken?: string | null,
      rewarder?: string | null,
      newDuration?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      {
        stakingToken: string;
        rewardsToken: string;
        rewarder: string;
        newDuration: BigNumber;
      }
    >;

    "Staked(address,address,uint256)"(
      stakingToken?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { stakingToken: string; account: string; amount: BigNumber }
    >;

    Staked(
      stakingToken?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { stakingToken: string; account: string; amount: BigNumber }
    >;

    "Withdrawn(address,address,uint256)"(
      stakingToken?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { stakingToken: string; account: string; amount: BigNumber }
    >;

    Withdrawn(
      stakingToken?: string | null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { stakingToken: string; account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addReward(
      _stakingToken: string,
      _rewardsToken: string,
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _stakingToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardAsInternalBalance(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    isAssetManager(
      stakingToken: string,
      rewarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyRewardAmount(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerToken(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsScheduler(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardsDuration(
      _stakingToken: string,
      _rewardsToken: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeWithPermit(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalEarned(
      _stakingToken: string,
      _rewardsToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unaccountedForUnpaidRewards(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      _stakingToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      _stakingToken: string,
      _rewardsToken: string,
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _stakingToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardAsInternalBalance(
      _stakingTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardWithCallback(
      _stakingTokens: string[],
      _callbackContract: string,
      _callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAssetManager(
      stakingToken: string,
      rewarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsScheduler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardsDuration(
      _stakingToken: string,
      _rewardsToken: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _stakingToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeWithPermit(
      _stakingToken: string,
      _amount: BigNumberish,
      _user: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalEarned(
      _stakingToken: string,
      _rewardsToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unaccountedForUnpaidRewards(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      _stakingToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistRewarder(
      _stakingToken: string,
      _rewardsToken: string,
      _rewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
