/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AmmV1SwapsInterface extends ethers.utils.Interface {
  functions: {
    "ONE()": FunctionFragment;
    "originSwap(address,address,address,uint256,address)": FunctionFragment;
    "targetSwap(address,address,address,uint256,address)": FunctionFragment;
    "viewOriginSwap(address,(uint256,uint256),address,address,uint256)": FunctionFragment;
    "viewTargetSwap(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "originSwap",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "targetSwap",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewOriginSwap",
    values: [
      string,
      { oGLiq: BigNumberish; nGLiq: BigNumberish },
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "viewTargetSwap",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "originSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "targetSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewOriginSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewTargetSwap",
    data: BytesLike
  ): Result;

  events: {
    "Trade(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export type TradeEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    trader: string;
    origin: string;
    target: string;
    originAmount: BigNumber;
    targetAmount: BigNumber;
  }
>;

export class AmmV1Swaps extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AmmV1SwapsInterface;

  functions: {
    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    originSwap(
      pool: string,
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewOriginSwap(
      pool: string,
      liquidity: { oGLiq: BigNumberish; nGLiq: BigNumberish },
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tAmt_: BigNumber }>;

    viewTargetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { oAmt_: BigNumber }>;
  };

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  originSwap(
    pool: string,
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetSwap(
    pool: string,
    _origin: string,
    _target: string,
    _targetAmount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewOriginSwap(
    pool: string,
    liquidity: { oGLiq: BigNumberish; nGLiq: BigNumberish },
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewTargetSwap(
    pool: string,
    _origin: string,
    _target: string,
    _targetAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    originSwap(
      pool: string,
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewOriginSwap(
      pool: string,
      liquidity: { oGLiq: BigNumberish; nGLiq: BigNumberish },
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewTargetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Trade(address,address,address,uint256,uint256)"(
      trader?: string | null,
      origin?: string | null,
      target?: string | null,
      originAmount?: null,
      targetAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        trader: string;
        origin: string;
        target: string;
        originAmount: BigNumber;
        targetAmount: BigNumber;
      }
    >;

    Trade(
      trader?: string | null,
      origin?: string | null,
      target?: string | null,
      originAmount?: null,
      targetAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        trader: string;
        origin: string;
        target: string;
        originAmount: BigNumber;
        targetAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    originSwap(
      pool: string,
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewOriginSwap(
      pool: string,
      liquidity: { oGLiq: BigNumberish; nGLiq: BigNumberish },
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewTargetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    originSwap(
      pool: string,
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewOriginSwap(
      pool: string,
      liquidity: { oGLiq: BigNumberish; nGLiq: BigNumberish },
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewTargetSwap(
      pool: string,
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
