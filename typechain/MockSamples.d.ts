/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockSamplesInterface extends ethers.utils.Interface {
  functions: {
    "decode(bytes32)": FunctionFragment;
    "encode((int256,int256,int256,int256,int256,int256,uint256))": FunctionFragment;
    "update(bytes32,int256,int256,int256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "decode", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [
      {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class MockSamples extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockSamplesInterface;

  functions: {
    decode(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          logPairPrice: BigNumber;
          accLogPairPrice: BigNumber;
          logBptPrice: BigNumber;
          accLogBptPrice: BigNumber;
          logInvariant: BigNumber;
          accLogInvariant: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          logPairPrice: BigNumber;
          accLogPairPrice: BigNumber;
          logBptPrice: BigNumber;
          accLogBptPrice: BigNumber;
          logInvariant: BigNumber;
          accLogInvariant: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;
  };

  decode(
    sample: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  encode(
    sample: {
      logPairPrice: BigNumberish;
      accLogPairPrice: BigNumberish;
      logBptPrice: BigNumberish;
      accLogBptPrice: BigNumberish;
      logInvariant: BigNumberish;
      accLogInvariant: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  update(
    sample: BytesLike,
    logPairPrice: BigNumberish,
    logBptPrice: BigNumberish,
    logInvariant: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  callStatic: {
    decode(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    decode(sample: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decode(
      sample: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      sample: {
        logPairPrice: BigNumberish;
        accLogPairPrice: BigNumberish;
        logBptPrice: BigNumberish;
        accLogBptPrice: BigNumberish;
        logInvariant: BigNumberish;
        accLogInvariant: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      sample: BytesLike,
      logPairPrice: BigNumberish,
      logBptPrice: BigNumberish,
      logInvariant: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
