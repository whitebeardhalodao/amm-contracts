/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ProportionalLiquidityInterface extends ethers.utils.Interface {
  functions: {
    "ONE()": FunctionFragment;
    "ONE_WEI()": FunctionFragment;
    "emergencyProportionalWithdraw(address,uint256)": FunctionFragment;
    "proportionalDeposit(address,uint256)": FunctionFragment;
    "proportionalWithdraw(address,uint256)": FunctionFragment;
    "viewProportionalDeposit(address,uint256)": FunctionFragment;
    "viewProportionalWithdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE_WEI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyProportionalWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proportionalDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proportionalWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewProportionalDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewProportionalWithdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE_WEI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyProportionalWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proportionalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proportionalWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewProportionalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewProportionalWithdraw",
    data: BytesLike
  ): Result;

  events: {
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class ProportionalLiquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProportionalLiquidityInterface;

  functions: {
    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_WEI(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewProportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]] & { curves_: BigNumber }>;

    viewProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_WEI(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyProportionalWithdraw(
    curve: string,
    _withdrawal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proportionalDeposit(
    curve: string,
    _deposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proportionalWithdraw(
    curve: string,
    _withdrawal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewProportionalDeposit(
    curve: string,
    _deposit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]] & { curves_: BigNumber }>;

  viewProportionalWithdraw(
    curve: string,
    _withdrawal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_WEI(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    proportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]] & { curves_: BigNumber }>;

    proportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    viewProportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]] & { curves_: BigNumber }>;

    viewProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_WEI(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewProportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_WEI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewProportionalDeposit(
      curve: string,
      _deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewProportionalWithdraw(
      curve: string,
      _withdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
